// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/policy_cmd.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignedPolicyCmd represents a Command issued by an Actor in the context of a Policy
// The command represents an instruction to be executed
// The message type contains a signature which is used to authenticate the Command's Actor
type SignedPolicyCmd struct {
	// payload contains the command context
	Payload *PolicyCmdPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signature is a signature of the payload.
	// The signature is generated using the VerificationMethod / Authorization fields
	// specificied by the DID document of the Actor.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignedPolicyCmd) Reset()         { *m = SignedPolicyCmd{} }
func (m *SignedPolicyCmd) String() string { return proto.CompactTextString(m) }
func (*SignedPolicyCmd) ProtoMessage()    {}
func (*SignedPolicyCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{0}
}
func (m *SignedPolicyCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPolicyCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPolicyCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPolicyCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPolicyCmd.Merge(m, src)
}
func (m *SignedPolicyCmd) XXX_Size() int {
	return m.Size()
}
func (m *SignedPolicyCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPolicyCmd.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPolicyCmd proto.InternalMessageInfo

func (m *SignedPolicyCmd) GetPayload() *PolicyCmdPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SignedPolicyCmd) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// PolicyCmdPayload represents the payload containing the context of the issued command
type PolicyCmdPayload struct {
	// actor is a did string representing the actor which issued the command
	Actor string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	// issued_height is the SourceHub block height of when the Payload was created
	IssuedHeight uint64 `protobuf:"varint,2,opt,name=issued_height,json=issuedHeight,proto3" json:"issued_height,omitempty"`
	// expiration_delta specifies the maximum number of blocks from the issued height during which the Command Payload will be accepted.
	// This field is mandatory and is used to prevent replay attacks
	ExpirationDelta uint64 `protobuf:"varint,3,opt,name=expiration_delta,json=expirationDelta,proto3" json:"expiration_delta,omitempty"`
	// creation_time contains a client generated timestamp for the creation of the command.
	// This is used only as metadata and isn't trusted
	CreationTime *types.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// policy_id is the ID of the policy under which the Command will be executed
	PolicyId string `protobuf:"bytes,5,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Types that are valid to be assigned to Cmd:
	//	*PolicyCmdPayload_SetRelationshipCmd
	//	*PolicyCmdPayload_DeleteRelationshipCmd
	//	*PolicyCmdPayload_RegisterObjectCmd
	//	*PolicyCmdPayload_UnregisterObjectCmd
	Cmd isPolicyCmdPayload_Cmd `protobuf_oneof:"cmd"`
}

func (m *PolicyCmdPayload) Reset()         { *m = PolicyCmdPayload{} }
func (m *PolicyCmdPayload) String() string { return proto.CompactTextString(m) }
func (*PolicyCmdPayload) ProtoMessage()    {}
func (*PolicyCmdPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{1}
}
func (m *PolicyCmdPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCmdPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCmdPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCmdPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCmdPayload.Merge(m, src)
}
func (m *PolicyCmdPayload) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCmdPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCmdPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCmdPayload proto.InternalMessageInfo

type isPolicyCmdPayload_Cmd interface {
	isPolicyCmdPayload_Cmd()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyCmdPayload_SetRelationshipCmd struct {
	SetRelationshipCmd *SetRelationshipCmd `protobuf:"bytes,6,opt,name=set_relationship_cmd,json=setRelationshipCmd,proto3,oneof" json:"set_relationship_cmd,omitempty"`
}
type PolicyCmdPayload_DeleteRelationshipCmd struct {
	DeleteRelationshipCmd *DeleteRelationshipCmd `protobuf:"bytes,7,opt,name=delete_relationship_cmd,json=deleteRelationshipCmd,proto3,oneof" json:"delete_relationship_cmd,omitempty"`
}
type PolicyCmdPayload_RegisterObjectCmd struct {
	RegisterObjectCmd *RegisterObjectCmd `protobuf:"bytes,8,opt,name=register_object_cmd,json=registerObjectCmd,proto3,oneof" json:"register_object_cmd,omitempty"`
}
type PolicyCmdPayload_UnregisterObjectCmd struct {
	UnregisterObjectCmd *UnregisterObjectCmd `protobuf:"bytes,9,opt,name=unregister_object_cmd,json=unregisterObjectCmd,proto3,oneof" json:"unregister_object_cmd,omitempty"`
}

func (*PolicyCmdPayload_SetRelationshipCmd) isPolicyCmdPayload_Cmd()    {}
func (*PolicyCmdPayload_DeleteRelationshipCmd) isPolicyCmdPayload_Cmd() {}
func (*PolicyCmdPayload_RegisterObjectCmd) isPolicyCmdPayload_Cmd()     {}
func (*PolicyCmdPayload_UnregisterObjectCmd) isPolicyCmdPayload_Cmd()   {}

func (m *PolicyCmdPayload) GetCmd() isPolicyCmdPayload_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *PolicyCmdPayload) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *PolicyCmdPayload) GetIssuedHeight() uint64 {
	if m != nil {
		return m.IssuedHeight
	}
	return 0
}

func (m *PolicyCmdPayload) GetExpirationDelta() uint64 {
	if m != nil {
		return m.ExpirationDelta
	}
	return 0
}

func (m *PolicyCmdPayload) GetCreationTime() *types.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *PolicyCmdPayload) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *PolicyCmdPayload) GetSetRelationshipCmd() *SetRelationshipCmd {
	if x, ok := m.GetCmd().(*PolicyCmdPayload_SetRelationshipCmd); ok {
		return x.SetRelationshipCmd
	}
	return nil
}

func (m *PolicyCmdPayload) GetDeleteRelationshipCmd() *DeleteRelationshipCmd {
	if x, ok := m.GetCmd().(*PolicyCmdPayload_DeleteRelationshipCmd); ok {
		return x.DeleteRelationshipCmd
	}
	return nil
}

func (m *PolicyCmdPayload) GetRegisterObjectCmd() *RegisterObjectCmd {
	if x, ok := m.GetCmd().(*PolicyCmdPayload_RegisterObjectCmd); ok {
		return x.RegisterObjectCmd
	}
	return nil
}

func (m *PolicyCmdPayload) GetUnregisterObjectCmd() *UnregisterObjectCmd {
	if x, ok := m.GetCmd().(*PolicyCmdPayload_UnregisterObjectCmd); ok {
		return x.UnregisterObjectCmd
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyCmdPayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyCmdPayload_SetRelationshipCmd)(nil),
		(*PolicyCmdPayload_DeleteRelationshipCmd)(nil),
		(*PolicyCmdPayload_RegisterObjectCmd)(nil),
		(*PolicyCmdPayload_UnregisterObjectCmd)(nil),
	}
}

// SetRelationshipCmd sets a Relationship in a Policy
type SetRelationshipCmd struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (m *SetRelationshipCmd) Reset()         { *m = SetRelationshipCmd{} }
func (m *SetRelationshipCmd) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipCmd) ProtoMessage()    {}
func (*SetRelationshipCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{2}
}
func (m *SetRelationshipCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipCmd.Merge(m, src)
}
func (m *SetRelationshipCmd) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipCmd.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipCmd proto.InternalMessageInfo

func (m *SetRelationshipCmd) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

// DeleteRelationshipCmd removes a Relationship in a Policy
type DeleteRelationshipCmd struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (m *DeleteRelationshipCmd) Reset()         { *m = DeleteRelationshipCmd{} }
func (m *DeleteRelationshipCmd) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCmd) ProtoMessage()    {}
func (*DeleteRelationshipCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{3}
}
func (m *DeleteRelationshipCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipCmd.Merge(m, src)
}
func (m *DeleteRelationshipCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipCmd proto.InternalMessageInfo

func (m *DeleteRelationshipCmd) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

// RegisterObjectCmd registers an Object in a Policy
type RegisterObjectCmd struct {
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *RegisterObjectCmd) Reset()         { *m = RegisterObjectCmd{} }
func (m *RegisterObjectCmd) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectCmd) ProtoMessage()    {}
func (*RegisterObjectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{4}
}
func (m *RegisterObjectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectCmd.Merge(m, src)
}
func (m *RegisterObjectCmd) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectCmd proto.InternalMessageInfo

func (m *RegisterObjectCmd) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// UnregisterObjectCmd unregisters an Object in a Policy
type UnregisterObjectCmd struct {
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *UnregisterObjectCmd) Reset()         { *m = UnregisterObjectCmd{} }
func (m *UnregisterObjectCmd) String() string { return proto.CompactTextString(m) }
func (*UnregisterObjectCmd) ProtoMessage()    {}
func (*UnregisterObjectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{5}
}
func (m *UnregisterObjectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnregisterObjectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnregisterObjectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnregisterObjectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterObjectCmd.Merge(m, src)
}
func (m *UnregisterObjectCmd) XXX_Size() int {
	return m.Size()
}
func (m *UnregisterObjectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterObjectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterObjectCmd proto.InternalMessageInfo

func (m *UnregisterObjectCmd) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// SetRelationshipCmd sets a Relationship in a Policy
type SetRelationshipCmdResult struct {
	// Indicates whether the given Relationship previously existed, ie the Tx was a no op
	RecordExisted bool `protobuf:"varint,1,opt,name=record_existed,json=recordExisted,proto3" json:"record_existed,omitempty"`
}

func (m *SetRelationshipCmdResult) Reset()         { *m = SetRelationshipCmdResult{} }
func (m *SetRelationshipCmdResult) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipCmdResult) ProtoMessage()    {}
func (*SetRelationshipCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{6}
}
func (m *SetRelationshipCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipCmdResult.Merge(m, src)
}
func (m *SetRelationshipCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipCmdResult proto.InternalMessageInfo

func (m *SetRelationshipCmdResult) GetRecordExisted() bool {
	if m != nil {
		return m.RecordExisted
	}
	return false
}

// DeleteRelationshipCmdResult removes a Relationship in a Policy
type DeleteRelationshipCmdResult struct {
	RecordFound bool `protobuf:"varint,1,opt,name=record_found,json=recordFound,proto3" json:"record_found,omitempty"`
}

func (m *DeleteRelationshipCmdResult) Reset()         { *m = DeleteRelationshipCmdResult{} }
func (m *DeleteRelationshipCmdResult) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCmdResult) ProtoMessage()    {}
func (*DeleteRelationshipCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{7}
}
func (m *DeleteRelationshipCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipCmdResult.Merge(m, src)
}
func (m *DeleteRelationshipCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipCmdResult proto.InternalMessageInfo

func (m *DeleteRelationshipCmdResult) GetRecordFound() bool {
	if m != nil {
		return m.RecordFound
	}
	return false
}

// RegisterObjectCmdResult registers an Object in a Policy
type RegisterObjectCmdResult struct {
	Result RegistrationResult  `protobuf:"varint,1,opt,name=result,proto3,enum=sourcehub.acp.RegistrationResult" json:"result,omitempty"`
	Record *RelationshipRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *RegisterObjectCmdResult) Reset()         { *m = RegisterObjectCmdResult{} }
func (m *RegisterObjectCmdResult) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectCmdResult) ProtoMessage()    {}
func (*RegisterObjectCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{8}
}
func (m *RegisterObjectCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectCmdResult.Merge(m, src)
}
func (m *RegisterObjectCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectCmdResult proto.InternalMessageInfo

func (m *RegisterObjectCmdResult) GetResult() RegistrationResult {
	if m != nil {
		return m.Result
	}
	return RegistrationResult_NoOp
}

func (m *RegisterObjectCmdResult) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

// UnregisterObjectCmdResult unregisters an Object in a Policy
type UnregisterObjectCmdResult struct {
	Found                bool   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	RelationshipsRemoved uint64 `protobuf:"varint,2,opt,name=relationships_removed,json=relationshipsRemoved,proto3" json:"relationships_removed,omitempty"`
}

func (m *UnregisterObjectCmdResult) Reset()         { *m = UnregisterObjectCmdResult{} }
func (m *UnregisterObjectCmdResult) String() string { return proto.CompactTextString(m) }
func (*UnregisterObjectCmdResult) ProtoMessage()    {}
func (*UnregisterObjectCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{9}
}
func (m *UnregisterObjectCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnregisterObjectCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnregisterObjectCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnregisterObjectCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterObjectCmdResult.Merge(m, src)
}
func (m *UnregisterObjectCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *UnregisterObjectCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterObjectCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterObjectCmdResult proto.InternalMessageInfo

func (m *UnregisterObjectCmdResult) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *UnregisterObjectCmdResult) GetRelationshipsRemoved() uint64 {
	if m != nil {
		return m.RelationshipsRemoved
	}
	return 0
}

type PolicyCmdResult struct {
	// Types that are valid to be assigned to Result:
	//
	//	*PolicyCmdResult_SetRelationshipResult
	//	*PolicyCmdResult_DeleteRelationshipResult
	//	*PolicyCmdResult_RegisterObjectResult
	//	*PolicyCmdResult_UnregisterObjectResult
	Result isPolicyCmdResult_Result `protobuf_oneof:"result"`
}

func (m *PolicyCmdResult) Reset()         { *m = PolicyCmdResult{} }
func (m *PolicyCmdResult) String() string { return proto.CompactTextString(m) }
func (*PolicyCmdResult) ProtoMessage()    {}
func (*PolicyCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{10}
}
func (m *PolicyCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCmdResult.Merge(m, src)
}
func (m *PolicyCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCmdResult proto.InternalMessageInfo

type isPolicyCmdResult_Result interface {
	isPolicyCmdResult_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyCmdResult_SetRelationshipResult struct {
	SetRelationshipResult *SetRelationshipCmdResult `protobuf:"bytes,1,opt,name=set_relationship_result,json=setRelationshipResult,proto3,oneof" json:"set_relationship_result,omitempty"`
}
type PolicyCmdResult_DeleteRelationshipResult struct {
	DeleteRelationshipResult *DeleteRelationshipCmdResult `protobuf:"bytes,2,opt,name=delete_relationship_result,json=deleteRelationshipResult,proto3,oneof" json:"delete_relationship_result,omitempty"`
}
type PolicyCmdResult_RegisterObjectResult struct {
	RegisterObjectResult *RegisterObjectCmdResult `protobuf:"bytes,3,opt,name=register_object_result,json=registerObjectResult,proto3,oneof" json:"register_object_result,omitempty"`
}
type PolicyCmdResult_UnregisterObjectResult struct {
	UnregisterObjectResult *UnregisterObjectCmdResult `protobuf:"bytes,4,opt,name=unregister_object_result,json=unregisterObjectResult,proto3,oneof" json:"unregister_object_result,omitempty"`
}

func (*PolicyCmdResult_SetRelationshipResult) isPolicyCmdResult_Result()    {}
func (*PolicyCmdResult_DeleteRelationshipResult) isPolicyCmdResult_Result() {}
func (*PolicyCmdResult_RegisterObjectResult) isPolicyCmdResult_Result()     {}
func (*PolicyCmdResult_UnregisterObjectResult) isPolicyCmdResult_Result()   {}

func (m *PolicyCmdResult) GetResult() isPolicyCmdResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PolicyCmdResult) GetSetRelationshipResult() *SetRelationshipCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_SetRelationshipResult); ok {
		return x.SetRelationshipResult
	}
	return nil
}

func (m *PolicyCmdResult) GetDeleteRelationshipResult() *DeleteRelationshipCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_DeleteRelationshipResult); ok {
		return x.DeleteRelationshipResult
	}
	return nil
}

func (m *PolicyCmdResult) GetRegisterObjectResult() *RegisterObjectCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_RegisterObjectResult); ok {
		return x.RegisterObjectResult
	}
	return nil
}

func (m *PolicyCmdResult) GetUnregisterObjectResult() *UnregisterObjectCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_UnregisterObjectResult); ok {
		return x.UnregisterObjectResult
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyCmdResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyCmdResult_SetRelationshipResult)(nil),
		(*PolicyCmdResult_DeleteRelationshipResult)(nil),
		(*PolicyCmdResult_RegisterObjectResult)(nil),
		(*PolicyCmdResult_UnregisterObjectResult)(nil),
	}
}

func init() {
	proto.RegisterType((*SignedPolicyCmd)(nil), "sourcehub.acp.SignedPolicyCmd")
	proto.RegisterType((*PolicyCmdPayload)(nil), "sourcehub.acp.PolicyCmdPayload")
	proto.RegisterType((*SetRelationshipCmd)(nil), "sourcehub.acp.SetRelationshipCmd")
	proto.RegisterType((*DeleteRelationshipCmd)(nil), "sourcehub.acp.DeleteRelationshipCmd")
	proto.RegisterType((*RegisterObjectCmd)(nil), "sourcehub.acp.RegisterObjectCmd")
	proto.RegisterType((*UnregisterObjectCmd)(nil), "sourcehub.acp.UnregisterObjectCmd")
	proto.RegisterType((*SetRelationshipCmdResult)(nil), "sourcehub.acp.SetRelationshipCmdResult")
	proto.RegisterType((*DeleteRelationshipCmdResult)(nil), "sourcehub.acp.DeleteRelationshipCmdResult")
	proto.RegisterType((*RegisterObjectCmdResult)(nil), "sourcehub.acp.RegisterObjectCmdResult")
	proto.RegisterType((*UnregisterObjectCmdResult)(nil), "sourcehub.acp.UnregisterObjectCmdResult")
	proto.RegisterType((*PolicyCmdResult)(nil), "sourcehub.acp.PolicyCmdResult")
}

func init() { proto.RegisterFile("sourcehub/acp/policy_cmd.proto", fileDescriptor_1de5e9736122d1ff) }

var fileDescriptor_1de5e9736122d1ff = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x18, 0x4d, 0x6e, 0x48, 0x48, 0xbe, 0x24, 0xfc, 0x0c, 0x09, 0xf8, 0x86, 0xab, 0x10, 0x7c, 0xef,
	0x6d, 0x69, 0xa5, 0x3a, 0x12, 0xac, 0x58, 0xd1, 0x06, 0x5a, 0xd1, 0x55, 0xd1, 0x50, 0x24, 0xd4,
	0x05, 0x91, 0xe3, 0x19, 0x12, 0xd3, 0x38, 0x63, 0x8d, 0xc7, 0x2d, 0x3c, 0x45, 0xfb, 0x28, 0x7d,
	0x86, 0xae, 0xba, 0x64, 0xd9, 0x65, 0x05, 0x2f, 0x52, 0x79, 0x66, 0xf2, 0x67, 0x5b, 0xa2, 0x55,
	0x77, 0xc9, 0x99, 0xf3, 0x9d, 0xe3, 0x39, 0xe3, 0x39, 0x86, 0x66, 0xc0, 0x42, 0xee, 0xd0, 0x41,
	0xd8, 0x6b, 0xdb, 0x8e, 0xdf, 0xf6, 0xd9, 0xd0, 0x75, 0x6e, 0xba, 0x8e, 0x47, 0x2c, 0x9f, 0x33,
	0xc1, 0x50, 0x75, 0xb2, 0x6e, 0xd9, 0x8e, 0xdf, 0xd8, 0xea, 0x33, 0xd6, 0x1f, 0xd2, 0xb6, 0x5c,
	0xec, 0x85, 0x97, 0x6d, 0xe1, 0x7a, 0x34, 0x10, 0xb6, 0xe7, 0x2b, 0x7e, 0xa3, 0x35, 0xaf, 0xc7,
	0xe9, 0xd0, 0x16, 0x2e, 0x1b, 0x05, 0x03, 0x57, 0x33, 0xcc, 0x2b, 0x58, 0x3e, 0x75, 0xfb, 0x23,
	0x4a, 0x4e, 0xa4, 0xd7, 0xa1, 0x47, 0xd0, 0x3e, 0x2c, 0xfa, 0xf6, 0xcd, 0x90, 0xd9, 0xc4, 0xc8,
	0xb6, 0xb2, 0x3b, 0xe5, 0xdd, 0x2d, 0x6b, 0xce, 0xd6, 0x9a, 0x50, 0x4f, 0x14, 0x0d, 0x8f, 0xf9,
	0xe8, 0x1f, 0x28, 0x05, 0x6e, 0x7f, 0x64, 0x8b, 0x90, 0x53, 0xe3, 0xaf, 0x56, 0x76, 0xa7, 0x82,
	0xa7, 0x80, 0xf9, 0x75, 0x01, 0x56, 0xe2, 0xb3, 0xa8, 0x06, 0x79, 0xdb, 0x11, 0x8c, 0x4b, 0xaf,
	0x12, 0x56, 0x7f, 0xd0, 0xbf, 0x50, 0x75, 0x83, 0x20, 0xa4, 0xa4, 0x3b, 0xa0, 0x6e, 0x7f, 0x20,
	0xa4, 0xd8, 0x02, 0xae, 0x28, 0xf0, 0x58, 0x62, 0xe8, 0x09, 0xac, 0xd0, 0x6b, 0xdf, 0xe5, 0x72,
	0x4f, 0x5d, 0x42, 0x87, 0xc2, 0x36, 0x72, 0x92, 0xb7, 0x3c, 0xc5, 0x8f, 0x22, 0x18, 0x1d, 0x40,
	0xd5, 0xe1, 0x54, 0x11, 0xa3, 0x90, 0x8c, 0x05, 0xb9, 0xb3, 0x86, 0xa5, 0x12, 0xb4, 0xc6, 0x09,
	0x5a, 0x6f, 0xc7, 0x09, 0xe2, 0xca, 0x78, 0x20, 0x82, 0xd0, 0x26, 0x94, 0xf4, 0x69, 0xb8, 0xc4,
	0xc8, 0xcb, 0x47, 0x2d, 0x2a, 0xe0, 0x35, 0x41, 0x67, 0x50, 0x0b, 0xa8, 0xe8, 0xce, 0xc6, 0x1b,
	0x1d, 0x9a, 0x51, 0x90, 0x26, 0xdb, 0xb1, 0xf8, 0x4e, 0xa9, 0xc0, 0x33, 0xcc, 0x43, 0x8f, 0x1c,
	0x67, 0x30, 0x0a, 0x12, 0x28, 0xba, 0x80, 0x0d, 0x42, 0x87, 0x54, 0xd0, 0xa4, 0xf2, 0xa2, 0x54,
	0xfe, 0x2f, 0xa6, 0x7c, 0x24, 0xd9, 0x49, 0xf1, 0x3a, 0x49, 0x5b, 0x40, 0x18, 0xd6, 0x38, 0xed,
	0xbb, 0x81, 0xa0, 0xbc, 0xcb, 0x7a, 0x57, 0xd4, 0x11, 0x52, 0xbb, 0x28, 0xb5, 0x5b, 0x31, 0x6d,
	0xac, 0x99, 0x6f, 0x24, 0x51, 0xe9, 0xae, 0xf2, 0x38, 0x88, 0xce, 0xa1, 0x1e, 0x8e, 0xd2, 0x54,
	0x4b, 0x52, 0xd5, 0x8c, 0xa9, 0x9e, 0x8d, 0x78, 0x8a, 0xee, 0x5a, 0x98, 0x84, 0x3b, 0x79, 0xc8,
	0x39, 0x1e, 0x31, 0xcf, 0x00, 0x25, 0x03, 0x44, 0x07, 0x50, 0x99, 0xcd, 0x48, 0xbf, 0xb8, 0x9b,
	0x89, 0x3d, 0x4c, 0x29, 0x78, 0x6e, 0xc0, 0x3c, 0x87, 0x7a, 0x6a, 0x7a, 0x7f, 0xae, 0xdc, 0x81,
	0xd5, 0x44, 0x76, 0xe8, 0x19, 0x14, 0x54, 0x36, 0x5a, 0xaf, 0x1e, 0xd3, 0x53, 0x4c, 0xac, 0x49,
	0xe6, 0x11, 0xac, 0xa5, 0x24, 0xf5, 0xbb, 0x2a, 0x2f, 0xc0, 0x48, 0x46, 0x87, 0x69, 0x10, 0x0e,
	0x05, 0xfa, 0x1f, 0x96, 0x38, 0x75, 0x18, 0x27, 0x5d, 0x7a, 0x1d, 0xb9, 0xa8, 0xbb, 0x5f, 0xc4,
	0x55, 0x85, 0xbe, 0x54, 0xa0, 0xf9, 0x1c, 0x36, 0x53, 0x63, 0xd2, 0x2a, 0xdb, 0x51, 0x58, 0x52,
	0xe5, 0x92, 0x85, 0xa3, 0xb1, 0x46, 0x59, 0x61, 0xaf, 0x22, 0xc8, 0xfc, 0x94, 0x85, 0x8d, 0x44,
	0x1e, 0x7a, 0x7c, 0x1f, 0x0a, 0x5c, 0xfe, 0x92, 0x83, 0x4b, 0x89, 0x9b, 0xa3, 0xe6, 0xd4, 0xbd,
	0x56, 0x23, 0x58, 0x0f, 0xa8, 0xd1, 0xc8, 0x45, 0x36, 0x45, 0x39, 0x65, 0x74, 0xe6, 0x80, 0x24,
	0x11, 0xeb, 0x01, 0xf3, 0x12, 0xfe, 0x4e, 0x09, 0x57, 0x3f, 0x52, 0x0d, 0xf2, 0xb3, 0x5b, 0x51,
	0x7f, 0xd0, 0x1e, 0xd4, 0x67, 0xcf, 0x38, 0xe8, 0x72, 0xea, 0xb1, 0x0f, 0x94, 0xe8, 0x9a, 0xaa,
	0xcd, 0x2d, 0x62, 0xb5, 0x66, 0x7e, 0xc9, 0xc1, 0xf2, 0xa4, 0xfe, 0xb4, 0xbc, 0x0d, 0x1b, 0x89,
	0xe6, 0x98, 0x89, 0xa0, 0xbc, 0xfb, 0xf8, 0xc1, 0xf2, 0x50, 0x4a, 0xd1, 0x2d, 0x8f, 0x55, 0x88,
	0xb6, 0xb8, 0x82, 0x46, 0x5a, 0x8b, 0x68, 0x17, 0x95, 0xd6, 0xd3, 0x5f, 0x29, 0x92, 0x89, 0x91,
	0x91, 0xac, 0x13, 0xed, 0x75, 0x01, 0xeb, 0xf1, 0xbb, 0xaf, 0x7d, 0x72, 0xd2, 0xe7, 0xd1, 0x43,
	0xa5, 0x32, 0xf1, 0xa8, 0xcd, 0x1f, 0x88, 0xd6, 0x27, 0x60, 0x24, 0xdb, 0x45, 0x3b, 0xa8, 0x46,
	0xdf, 0x79, 0xb8, 0x60, 0x26, 0x1e, 0xeb, 0xf1, 0x9a, 0x51, 0x2b, 0x9d, 0xe2, 0xf8, 0x35, 0xec,
	0x1c, 0x7f, 0xbb, 0x6b, 0x66, 0x6f, 0xef, 0x9a, 0xd9, 0x1f, 0x77, 0xcd, 0xec, 0xe7, 0xfb, 0x66,
	0xe6, 0xf6, 0xbe, 0x99, 0xf9, 0x7e, 0xdf, 0xcc, 0xbc, 0xb3, 0xfa, 0xae, 0x88, 0x3c, 0x1c, 0xe6,
	0xb5, 0x95, 0xe3, 0x88, 0x8a, 0x8f, 0x8c, 0xbf, 0x6f, 0x4f, 0x3f, 0xb9, 0xd7, 0xf2, 0xa3, 0x2b,
	0x6e, 0x7c, 0x1a, 0xf4, 0x0a, 0xf2, 0x0b, 0xb3, 0xf7, 0x33, 0x00, 0x00, 0xff, 0xff, 0x82, 0x2f,
	0x39, 0x7b, 0xe2, 0x07, 0x00, 0x00,
}

func (m *SignedPolicyCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPolicyCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPolicyCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPolicyCmd(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCmdPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cmd != nil {
		{
			size := m.Cmd.Size()
			i -= size
			if _, err := m.Cmd.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintPolicyCmd(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreationTime != nil {
		{
			size, err := m.CreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExpirationDelta != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.ExpirationDelta))
		i--
		dAtA[i] = 0x18
	}
	if m.IssuedHeight != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.IssuedHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintPolicyCmd(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdPayload_SetRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdPayload_SetRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetRelationshipCmd != nil {
		{
			size, err := m.SetRelationshipCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdPayload_DeleteRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdPayload_DeleteRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRelationshipCmd != nil {
		{
			size, err := m.DeleteRelationshipCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdPayload_RegisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdPayload_RegisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterObjectCmd != nil {
		{
			size, err := m.RegisterObjectCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdPayload_UnregisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdPayload_UnregisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnregisterObjectCmd != nil {
		{
			size, err := m.UnregisterObjectCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *SetRelationshipCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnregisterObjectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnregisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetRelationshipCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordExisted {
		i--
		if m.RecordExisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordFound {
		i--
		if m.RecordFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnregisterObjectCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterObjectCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnregisterObjectCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelationshipsRemoved != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.RelationshipsRemoved))
		i--
		dAtA[i] = 0x10
	}
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdResult_SetRelationshipResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_SetRelationshipResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetRelationshipResult != nil {
		{
			size, err := m.SetRelationshipResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_DeleteRelationshipResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_DeleteRelationshipResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRelationshipResult != nil {
		{
			size, err := m.DeleteRelationshipResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_RegisterObjectResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_RegisterObjectResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterObjectResult != nil {
		{
			size, err := m.RegisterObjectResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_UnregisterObjectResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_UnregisterObjectResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnregisterObjectResult != nil {
		{
			size, err := m.UnregisterObjectResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintPolicyCmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyCmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedPolicyCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *PolicyCmdPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	if m.IssuedHeight != 0 {
		n += 1 + sovPolicyCmd(uint64(m.IssuedHeight))
	}
	if m.ExpirationDelta != 0 {
		n += 1 + sovPolicyCmd(uint64(m.ExpirationDelta))
	}
	if m.CreationTime != nil {
		l = m.CreationTime.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	if m.Cmd != nil {
		n += m.Cmd.Size()
	}
	return n
}

func (m *PolicyCmdPayload_SetRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetRelationshipCmd != nil {
		l = m.SetRelationshipCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdPayload_DeleteRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRelationshipCmd != nil {
		l = m.DeleteRelationshipCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdPayload_RegisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterObjectCmd != nil {
		l = m.RegisterObjectCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdPayload_UnregisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnregisterObjectCmd != nil {
		l = m.UnregisterObjectCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *SetRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *RegisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *UnregisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *SetRelationshipCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordExisted {
		n += 2
	}
	return n
}

func (m *DeleteRelationshipCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordFound {
		n += 2
	}
	return n
}

func (m *RegisterObjectCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovPolicyCmd(uint64(m.Result))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *UnregisterObjectCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Found {
		n += 2
	}
	if m.RelationshipsRemoved != 0 {
		n += 1 + sovPolicyCmd(uint64(m.RelationshipsRemoved))
	}
	return n
}

func (m *PolicyCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *PolicyCmdResult_SetRelationshipResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetRelationshipResult != nil {
		l = m.SetRelationshipResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_DeleteRelationshipResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRelationshipResult != nil {
		l = m.DeleteRelationshipResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_RegisterObjectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterObjectResult != nil {
		l = m.RegisterObjectResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_UnregisterObjectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnregisterObjectResult != nil {
		l = m.UnregisterObjectResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func sovPolicyCmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyCmd(x uint64) (n int) {
	return sovPolicyCmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedPolicyCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPolicyCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPolicyCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &PolicyCmdPayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyCmdPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCmdPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCmdPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedHeight", wireType)
			}
			m.IssuedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDelta", wireType)
			}
			m.ExpirationDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationDelta |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = &types.Timestamp{}
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetRelationshipCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetRelationshipCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmdPayload_SetRelationshipCmd{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRelationshipCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRelationshipCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmdPayload_DeleteRelationshipCmd{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterObjectCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterObjectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmdPayload_RegisterObjectCmd{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterObjectCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnregisterObjectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmdPayload_UnregisterObjectCmd{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterObjectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterObjectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterObjectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordExisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordExisted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= RegistrationResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterObjectCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterObjectCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterObjectCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipsRemoved", wireType)
			}
			m.RelationshipsRemoved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationshipsRemoved |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetRelationshipResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetRelationshipCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_SetRelationshipResult{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRelationshipResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRelationshipCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_DeleteRelationshipResult{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterObjectResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterObjectCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_RegisterObjectResult{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregisterObjectResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnregisterObjectCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_UnregisterObjectResult{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyCmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyCmd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyCmd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyCmd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyCmd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyCmd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyCmd = fmt.Errorf("proto: unexpected end of group")
)
