// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/sourcehub/acp/relationship_selector.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RelationshipSelector models a set of predicates which are used to filter through
// Relationships in a Policy.
type RelationshipSelector struct {
	ObjectSelector   *ObjectSelector   `protobuf:"bytes,1,opt,name=object_selector,json=objectSelector,proto3" json:"object_selector,omitempty"`
	RelationSelector *RelationSelector `protobuf:"bytes,2,opt,name=relation_selector,json=relationSelector,proto3" json:"relation_selector,omitempty"`
	SubjectSelector  *SubjectSelector  `protobuf:"bytes,3,opt,name=subject_selector,json=subjectSelector,proto3" json:"subject_selector,omitempty"`
}

func (m *RelationshipSelector) Reset()         { *m = RelationshipSelector{} }
func (m *RelationshipSelector) String() string { return proto.CompactTextString(m) }
func (*RelationshipSelector) ProtoMessage()    {}
func (*RelationshipSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9b44337028bc8e, []int{0}
}
func (m *RelationshipSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationshipSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationshipSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationshipSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationshipSelector.Merge(m, src)
}
func (m *RelationshipSelector) XXX_Size() int {
	return m.Size()
}
func (m *RelationshipSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationshipSelector.DiscardUnknown(m)
}

var xxx_messageInfo_RelationshipSelector proto.InternalMessageInfo

func (m *RelationshipSelector) GetObjectSelector() *ObjectSelector {
	if m != nil {
		return m.ObjectSelector
	}
	return nil
}

func (m *RelationshipSelector) GetRelationSelector() *RelationSelector {
	if m != nil {
		return m.RelationSelector
	}
	return nil
}

func (m *RelationshipSelector) GetSubjectSelector() *SubjectSelector {
	if m != nil {
		return m.SubjectSelector
	}
	return nil
}

// ObjectSelector models a filter for Relationship Objects
type ObjectSelector struct {
	// Types that are valid to be assigned to Selector:
	//	*ObjectSelector_Object
	//	*ObjectSelector_Wildcard
	Selector isObjectSelector_Selector `protobuf_oneof:"selector"`
}

func (m *ObjectSelector) Reset()         { *m = ObjectSelector{} }
func (m *ObjectSelector) String() string { return proto.CompactTextString(m) }
func (*ObjectSelector) ProtoMessage()    {}
func (*ObjectSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9b44337028bc8e, []int{1}
}
func (m *ObjectSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectSelector.Merge(m, src)
}
func (m *ObjectSelector) XXX_Size() int {
	return m.Size()
}
func (m *ObjectSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectSelector proto.InternalMessageInfo

type isObjectSelector_Selector interface {
	isObjectSelector_Selector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ObjectSelector_Object struct {
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3,oneof" json:"object,omitempty"`
}
type ObjectSelector_Wildcard struct {
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof" json:"wildcard,omitempty"`
}

func (*ObjectSelector_Object) isObjectSelector_Selector()   {}
func (*ObjectSelector_Wildcard) isObjectSelector_Selector() {}

func (m *ObjectSelector) GetSelector() isObjectSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ObjectSelector) GetObject() *Object {
	if x, ok := m.GetSelector().(*ObjectSelector_Object); ok {
		return x.Object
	}
	return nil
}

func (m *ObjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := m.GetSelector().(*ObjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ObjectSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ObjectSelector_Object)(nil),
		(*ObjectSelector_Wildcard)(nil),
	}
}

// RelationsSelector models a filter for Relationship Relations
type RelationSelector struct {
	// Types that are valid to be assigned to Selector:
	//	*RelationSelector_Relation
	//	*RelationSelector_Wildcard
	Selector isRelationSelector_Selector `protobuf_oneof:"selector"`
}

func (m *RelationSelector) Reset()         { *m = RelationSelector{} }
func (m *RelationSelector) String() string { return proto.CompactTextString(m) }
func (*RelationSelector) ProtoMessage()    {}
func (*RelationSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9b44337028bc8e, []int{2}
}
func (m *RelationSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationSelector.Merge(m, src)
}
func (m *RelationSelector) XXX_Size() int {
	return m.Size()
}
func (m *RelationSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationSelector.DiscardUnknown(m)
}

var xxx_messageInfo_RelationSelector proto.InternalMessageInfo

type isRelationSelector_Selector interface {
	isRelationSelector_Selector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RelationSelector_Relation struct {
	Relation string `protobuf:"bytes,1,opt,name=relation,proto3,oneof" json:"relation,omitempty"`
}
type RelationSelector_Wildcard struct {
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof" json:"wildcard,omitempty"`
}

func (*RelationSelector_Relation) isRelationSelector_Selector() {}
func (*RelationSelector_Wildcard) isRelationSelector_Selector() {}

func (m *RelationSelector) GetSelector() isRelationSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *RelationSelector) GetRelation() string {
	if x, ok := m.GetSelector().(*RelationSelector_Relation); ok {
		return x.Relation
	}
	return ""
}

func (m *RelationSelector) GetWildcard() *WildcardSelector {
	if x, ok := m.GetSelector().(*RelationSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RelationSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RelationSelector_Relation)(nil),
		(*RelationSelector_Wildcard)(nil),
	}
}

// SubjectSelector models a filter for Relationship Subjects
type SubjectSelector struct {
	// Types that are valid to be assigned to Selector:
	//	*SubjectSelector_Subject
	//	*SubjectSelector_Wildcard
	Selector isSubjectSelector_Selector `protobuf_oneof:"selector"`
}

func (m *SubjectSelector) Reset()         { *m = SubjectSelector{} }
func (m *SubjectSelector) String() string { return proto.CompactTextString(m) }
func (*SubjectSelector) ProtoMessage()    {}
func (*SubjectSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9b44337028bc8e, []int{3}
}
func (m *SubjectSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectSelector.Merge(m, src)
}
func (m *SubjectSelector) XXX_Size() int {
	return m.Size()
}
func (m *SubjectSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectSelector.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectSelector proto.InternalMessageInfo

type isSubjectSelector_Selector interface {
	isSubjectSelector_Selector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubjectSelector_Subject struct {
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
}
type SubjectSelector_Wildcard struct {
	Wildcard *WildcardSelector `protobuf:"bytes,2,opt,name=wildcard,proto3,oneof" json:"wildcard,omitempty"`
}

func (*SubjectSelector_Subject) isSubjectSelector_Selector()  {}
func (*SubjectSelector_Wildcard) isSubjectSelector_Selector() {}

func (m *SubjectSelector) GetSelector() isSubjectSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *SubjectSelector) GetSubject() *Subject {
	if x, ok := m.GetSelector().(*SubjectSelector_Subject); ok {
		return x.Subject
	}
	return nil
}

func (m *SubjectSelector) GetWildcard() *WildcardSelector {
	if x, ok := m.GetSelector().(*SubjectSelector_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubjectSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubjectSelector_Subject)(nil),
		(*SubjectSelector_Wildcard)(nil),
	}
}

// WildcardSelector matches anything in a context
type WildcardSelector struct {
}

func (m *WildcardSelector) Reset()         { *m = WildcardSelector{} }
func (m *WildcardSelector) String() string { return proto.CompactTextString(m) }
func (*WildcardSelector) ProtoMessage()    {}
func (*WildcardSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9b44337028bc8e, []int{4}
}
func (m *WildcardSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WildcardSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WildcardSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WildcardSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WildcardSelector.Merge(m, src)
}
func (m *WildcardSelector) XXX_Size() int {
	return m.Size()
}
func (m *WildcardSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_WildcardSelector.DiscardUnknown(m)
}

var xxx_messageInfo_WildcardSelector proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RelationshipSelector)(nil), "sourcenetwork.sourcehub.acp.RelationshipSelector")
	proto.RegisterType((*ObjectSelector)(nil), "sourcenetwork.sourcehub.acp.ObjectSelector")
	proto.RegisterType((*RelationSelector)(nil), "sourcenetwork.sourcehub.acp.RelationSelector")
	proto.RegisterType((*SubjectSelector)(nil), "sourcenetwork.sourcehub.acp.SubjectSelector")
	proto.RegisterType((*WildcardSelector)(nil), "sourcenetwork.sourcehub.acp.WildcardSelector")
}

func init() {
	proto.RegisterFile("sourcenetwork/sourcehub/acp/relationship_selector.proto", fileDescriptor_ee9b44337028bc8e)
}

var fileDescriptor_ee9b44337028bc8e = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2f, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x87, 0xf0, 0x32, 0x4a, 0x93, 0xf4,
	0x13, 0x93, 0x0b, 0xf4, 0x8b, 0x52, 0x73, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x33, 0x32, 0x0b,
	0xe2, 0x8b, 0x53, 0x73, 0x52, 0x93, 0x4b, 0xf2, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xa4, 0x51, 0x34, 0xea, 0xc1, 0x35, 0xea, 0x25, 0x26, 0x17, 0x48, 0xe9, 0x11, 0x6b, 0x2a, 0xc4,
	0x30, 0xa5, 0x85, 0x4c, 0x5c, 0x22, 0x41, 0x48, 0xc2, 0xc1, 0x50, 0xbb, 0x84, 0x42, 0xb8, 0xf8,
	0xf3, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0xe0, 0xd6, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x69,
	0xeb, 0xe1, 0xb1, 0x5f, 0xcf, 0x1f, 0xac, 0x07, 0x66, 0x4a, 0x10, 0x5f, 0x3e, 0x0a, 0x5f, 0x28,
	0x8a, 0x4b, 0x10, 0xe6, 0x08, 0x84, 0xb9, 0x4c, 0x60, 0x73, 0x75, 0xf1, 0x9a, 0x0b, 0x73, 0x23,
	0xdc, 0x64, 0x81, 0x22, 0x34, 0x11, 0xa1, 0x70, 0x2e, 0x81, 0xe2, 0x52, 0x34, 0x27, 0x33, 0x83,
	0x8d, 0xd6, 0xc1, 0x6b, 0x74, 0x70, 0x29, 0xaa, 0x9b, 0xf9, 0x8b, 0x51, 0x05, 0x94, 0x56, 0x30,
	0x72, 0xf1, 0xa1, 0xfa, 0x4b, 0xc8, 0x96, 0x8b, 0x0d, 0xe2, 0x33, 0x68, 0xa0, 0x28, 0x13, 0x11,
	0x28, 0x1e, 0x0c, 0x41, 0x50, 0x4d, 0x42, 0xde, 0x5c, 0x1c, 0xe5, 0x99, 0x39, 0x29, 0xc9, 0x89,
	0x45, 0x29, 0x44, 0xf9, 0x3e, 0x1c, 0xaa, 0x18, 0x66, 0xbf, 0x07, 0x43, 0x10, 0xdc, 0x00, 0x27,
	0x2e, 0x2e, 0x0e, 0x98, 0x7f, 0x95, 0x3a, 0x19, 0xb9, 0x04, 0xd0, 0x83, 0x4a, 0x48, 0x86, 0x8b,
	0x03, 0x16, 0x58, 0x60, 0xe7, 0x72, 0x82, 0xb4, 0xc3, 0x44, 0x68, 0xe7, 0x96, 0x35, 0x8c, 0x5c,
	0xfc, 0x68, 0x61, 0x2b, 0xe4, 0xc0, 0xc5, 0x0e, 0x0d, 0x5d, 0x68, 0xc0, 0xa9, 0x10, 0x13, 0x35,
	0x1e, 0x0c, 0x41, 0x30, 0x6d, 0xb4, 0x73, 0xae, 0x10, 0x97, 0x00, 0xba, 0x5a, 0x27, 0x8f, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4b, 0xcf, 0x2c, 0x01, 0x59, 0x91,
	0x9c, 0x9f, 0xab, 0x8f, 0x2b, 0xcb, 0x55, 0x80, 0x33, 0x5d, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12,
	0x1b, 0x38, 0xbb, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x1d, 0x1b, 0x1b, 0xf6, 0x03,
	0x00, 0x00,
}

func (m *RelationshipSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationshipSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationshipSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubjectSelector != nil {
		{
			size, err := m.SubjectSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RelationSelector != nil {
		{
			size, err := m.RelationSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectSelector != nil {
		{
			size, err := m.ObjectSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size := m.Selector.Size()
			i -= size
			if _, err := m.Selector.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ObjectSelector_Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectSelector_Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ObjectSelector_Wildcard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectSelector_Wildcard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wildcard != nil {
		{
			size, err := m.Wildcard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RelationSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size := m.Selector.Size()
			i -= size
			if _, err := m.Selector.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RelationSelector_Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationSelector_Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Relation)
	copy(dAtA[i:], m.Relation)
	i = encodeVarintRelationshipSelector(dAtA, i, uint64(len(m.Relation)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *RelationSelector_Wildcard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationSelector_Wildcard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wildcard != nil {
		{
			size, err := m.Wildcard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SubjectSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size := m.Selector.Size()
			i -= size
			if _, err := m.Selector.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubjectSelector_Subject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectSelector_Subject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SubjectSelector_Wildcard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectSelector_Wildcard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wildcard != nil {
		{
			size, err := m.Wildcard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipSelector(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WildcardSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WildcardSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WildcardSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRelationshipSelector(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelationshipSelector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelationshipSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectSelector != nil {
		l = m.ObjectSelector.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	if m.RelationSelector != nil {
		l = m.RelationSelector.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	if m.SubjectSelector != nil {
		l = m.SubjectSelector.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}

func (m *ObjectSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		n += m.Selector.Size()
	}
	return n
}

func (m *ObjectSelector_Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}
func (m *ObjectSelector_Wildcard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wildcard != nil {
		l = m.Wildcard.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}
func (m *RelationSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		n += m.Selector.Size()
	}
	return n
}

func (m *RelationSelector_Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relation)
	n += 1 + l + sovRelationshipSelector(uint64(l))
	return n
}
func (m *RelationSelector_Wildcard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wildcard != nil {
		l = m.Wildcard.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}
func (m *SubjectSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		n += m.Selector.Size()
	}
	return n
}

func (m *SubjectSelector_Subject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}
func (m *SubjectSelector_Wildcard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wildcard != nil {
		l = m.Wildcard.Size()
		n += 1 + l + sovRelationshipSelector(uint64(l))
	}
	return n
}
func (m *WildcardSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRelationshipSelector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelationshipSelector(x uint64) (n int) {
	return sovRelationshipSelector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelationshipSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationshipSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationshipSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectSelector == nil {
				m.ObjectSelector = &ObjectSelector{}
			}
			if err := m.ObjectSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationSelector == nil {
				m.RelationSelector = &RelationSelector{}
			}
			if err := m.RelationSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubjectSelector == nil {
				m.SubjectSelector = &SubjectSelector{}
			}
			if err := m.SubjectSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Object{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &ObjectSelector_Object{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WildcardSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &ObjectSelector_Wildcard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = &RelationSelector_Relation{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WildcardSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &RelationSelector_Wildcard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Subject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SubjectSelector_Subject{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wildcard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WildcardSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SubjectSelector_Wildcard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WildcardSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WildcardSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WildcardSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationshipSelector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationshipSelector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelationshipSelector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelationshipSelector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelationshipSelector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelationshipSelector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationshipSelector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelationshipSelector = fmt.Errorf("proto: unexpected end of group")
)
