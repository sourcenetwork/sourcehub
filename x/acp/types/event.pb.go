// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/event.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventPolicyCreated struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PolicyId   string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyName string `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (m *EventPolicyCreated) Reset()         { *m = EventPolicyCreated{} }
func (m *EventPolicyCreated) String() string { return proto.CompactTextString(m) }
func (*EventPolicyCreated) ProtoMessage()    {}
func (*EventPolicyCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3688046be56f366, []int{0}
}
func (m *EventPolicyCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPolicyCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPolicyCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPolicyCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPolicyCreated.Merge(m, src)
}
func (m *EventPolicyCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventPolicyCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPolicyCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventPolicyCreated proto.InternalMessageInfo

func (m *EventPolicyCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventPolicyCreated) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EventPolicyCreated) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

type EventAccessDecisionCreated struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PolicyId   string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	DecisionId string `protobuf:"bytes,3,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	Actor      string `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`
	ActorDid   string `protobuf:"bytes,5,opt,name=actor_did,json=actorDid,proto3" json:"actor_did,omitempty"`
}

func (m *EventAccessDecisionCreated) Reset()         { *m = EventAccessDecisionCreated{} }
func (m *EventAccessDecisionCreated) String() string { return proto.CompactTextString(m) }
func (*EventAccessDecisionCreated) ProtoMessage()    {}
func (*EventAccessDecisionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3688046be56f366, []int{1}
}
func (m *EventAccessDecisionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAccessDecisionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAccessDecisionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAccessDecisionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAccessDecisionCreated.Merge(m, src)
}
func (m *EventAccessDecisionCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventAccessDecisionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAccessDecisionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventAccessDecisionCreated proto.InternalMessageInfo

func (m *EventAccessDecisionCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventAccessDecisionCreated) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EventAccessDecisionCreated) GetDecisionId() string {
	if m != nil {
		return m.DecisionId
	}
	return ""
}

func (m *EventAccessDecisionCreated) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *EventAccessDecisionCreated) GetActorDid() string {
	if m != nil {
		return m.ActorDid
	}
	return ""
}

type EventObjectRegistered struct {
	Actor          string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	PolicyId       string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ObjectResource string `protobuf:"bytes,3,opt,name=object_resource,json=objectResource,proto3" json:"object_resource,omitempty"`
	ObjectId       string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *EventObjectRegistered) Reset()         { *m = EventObjectRegistered{} }
func (m *EventObjectRegistered) String() string { return proto.CompactTextString(m) }
func (*EventObjectRegistered) ProtoMessage()    {}
func (*EventObjectRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3688046be56f366, []int{2}
}
func (m *EventObjectRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObjectRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObjectRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObjectRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObjectRegistered.Merge(m, src)
}
func (m *EventObjectRegistered) XXX_Size() int {
	return m.Size()
}
func (m *EventObjectRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObjectRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_EventObjectRegistered proto.InternalMessageInfo

func (m *EventObjectRegistered) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *EventObjectRegistered) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EventObjectRegistered) GetObjectResource() string {
	if m != nil {
		return m.ObjectResource
	}
	return ""
}

func (m *EventObjectRegistered) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

type EventObjectUnarchived struct {
	Actor          string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	PolicyId       string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ObjectResource string `protobuf:"bytes,3,opt,name=object_resource,json=objectResource,proto3" json:"object_resource,omitempty"`
	ObjectId       string `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *EventObjectUnarchived) Reset()         { *m = EventObjectUnarchived{} }
func (m *EventObjectUnarchived) String() string { return proto.CompactTextString(m) }
func (*EventObjectUnarchived) ProtoMessage()    {}
func (*EventObjectUnarchived) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3688046be56f366, []int{3}
}
func (m *EventObjectUnarchived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObjectUnarchived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObjectUnarchived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObjectUnarchived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObjectUnarchived.Merge(m, src)
}
func (m *EventObjectUnarchived) XXX_Size() int {
	return m.Size()
}
func (m *EventObjectUnarchived) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObjectUnarchived.DiscardUnknown(m)
}

var xxx_messageInfo_EventObjectUnarchived proto.InternalMessageInfo

func (m *EventObjectUnarchived) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *EventObjectUnarchived) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *EventObjectUnarchived) GetObjectResource() string {
	if m != nil {
		return m.ObjectResource
	}
	return ""
}

func (m *EventObjectUnarchived) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func init() {
	proto.RegisterType((*EventPolicyCreated)(nil), "sourcehub.acp.EventPolicyCreated")
	proto.RegisterType((*EventAccessDecisionCreated)(nil), "sourcehub.acp.EventAccessDecisionCreated")
	proto.RegisterType((*EventObjectRegistered)(nil), "sourcehub.acp.EventObjectRegistered")
	proto.RegisterType((*EventObjectUnarchived)(nil), "sourcehub.acp.EventObjectUnarchived")
}

func init() { proto.RegisterFile("sourcehub/acp/event.proto", fileDescriptor_e3688046be56f366) }

var fileDescriptor_e3688046be56f366 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xbf, 0x4a, 0x43, 0x31,
	0x14, 0xc6, 0x1b, 0xb5, 0xda, 0x46, 0x54, 0xb8, 0x28, 0x5c, 0x15, 0xa2, 0x74, 0xd1, 0xa9, 0x77,
	0xf0, 0x09, 0xd4, 0x0a, 0x76, 0x51, 0x29, 0xb8, 0xb8, 0x94, 0xf4, 0xe4, 0xd0, 0x46, 0xdb, 0x9b,
	0x4b, 0x92, 0x56, 0xfb, 0x16, 0x7d, 0x0b, 0x5f, 0xc5, 0xb1, 0xa3, 0xa3, 0xb4, 0x2f, 0x22, 0xf9,
	0x53, 0x15, 0xc5, 0xc9, 0xc1, 0x2d, 0xe7, 0xfb, 0x0e, 0xbf, 0xf3, 0x11, 0x3e, 0xba, 0x6b, 0xd4,
	0x50, 0x03, 0xf6, 0x86, 0x9d, 0x8c, 0x43, 0x91, 0xe1, 0x08, 0x73, 0x5b, 0x2f, 0xb4, 0xb2, 0x2a,
	0xd9, 0xf8, 0xb0, 0xea, 0x1c, 0x8a, 0x5a, 0x9f, 0x26, 0x17, 0xce, 0xbd, 0x51, 0x7d, 0x09, 0xe3,
	0x73, 0x8d, 0xdc, 0xa2, 0x48, 0x52, 0xba, 0x06, 0xee, 0xa9, 0x74, 0x4a, 0x0e, 0xc9, 0x71, 0xb5,
	0xb5, 0x18, 0x93, 0x7d, 0x5a, 0x2d, 0xfc, 0x6a, 0x5b, 0x8a, 0x74, 0xc9, 0x7b, 0x95, 0x20, 0x34,
	0x45, 0x72, 0x40, 0xd7, 0xa3, 0x99, 0xf3, 0x01, 0xa6, 0xcb, 0xde, 0xa6, 0x41, 0xba, 0xe2, 0x03,
	0xac, 0x3d, 0x13, 0xba, 0xe7, 0xcf, 0x9d, 0x02, 0xa0, 0x31, 0x0d, 0x04, 0x69, 0xa4, 0xca, 0xff,
	0x7e, 0x56, 0x44, 0x92, 0xb3, 0xe3, 0xd9, 0x85, 0xd4, 0x14, 0xc9, 0x36, 0x2d, 0x73, 0x70, 0xd4,
	0x15, 0x6f, 0x85, 0xc1, 0x31, 0xfd, 0xa3, 0x2d, 0xa4, 0x48, 0xcb, 0x81, 0xe9, 0x85, 0x86, 0x14,
	0xb5, 0x09, 0xa1, 0x3b, 0x3e, 0xe9, 0x75, 0xe7, 0x1e, 0xc1, 0xb6, 0xb0, 0x2b, 0x8d, 0x45, 0x8d,
	0x5f, 0x60, 0xe4, 0x1b, 0xec, 0xf7, 0x80, 0x47, 0x74, 0x4b, 0x79, 0x4c, 0x5b, 0x63, 0xf8, 0xfe,
	0x18, 0x72, 0x53, 0x45, 0x7a, 0x50, 0x1d, 0x25, 0x2e, 0x4a, 0x11, 0xc3, 0x56, 0x82, 0xd0, 0xfc,
	0x11, 0xe9, 0x36, 0xe7, 0x1a, 0x7a, 0x72, 0xf4, 0x8f, 0x91, 0xce, 0x2e, 0x5f, 0x66, 0x8c, 0x4c,
	0x67, 0x8c, 0xbc, 0xcd, 0x18, 0x99, 0xcc, 0x59, 0x69, 0x3a, 0x67, 0xa5, 0xd7, 0x39, 0x2b, 0xdd,
	0xd5, 0xbb, 0xd2, 0xba, 0x8e, 0x81, 0x1a, 0x64, 0x81, 0x94, 0xa3, 0x7d, 0x54, 0xfa, 0x21, 0xfb,
	0xac, 0xe6, 0x93, 0x2f, 0xa7, 0x1d, 0x17, 0x68, 0x3a, 0xab, 0xbe, 0x9d, 0x27, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x24, 0xbf, 0x61, 0xd7, 0xba, 0x02, 0x00, 0x00,
}

func (m *EventPolicyCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPolicyCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyName) > 0 {
		i -= len(m.PolicyName)
		copy(dAtA[i:], m.PolicyName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PolicyName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAccessDecisionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAccessDecisionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAccessDecisionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActorDid) > 0 {
		i -= len(m.ActorDid)
		copy(dAtA[i:], m.ActorDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ActorDid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DecisionId) > 0 {
		i -= len(m.DecisionId)
		copy(dAtA[i:], m.DecisionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DecisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventObjectRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObjectRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObjectRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ObjectResource) > 0 {
		i -= len(m.ObjectResource)
		copy(dAtA[i:], m.ObjectResource)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ObjectResource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventObjectUnarchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObjectUnarchived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObjectUnarchived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ObjectResource) > 0 {
		i -= len(m.ObjectResource)
		copy(dAtA[i:], m.ObjectResource)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ObjectResource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPolicyCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAccessDecisionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DecisionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ActorDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventObjectRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ObjectResource)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventObjectUnarchived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ObjectResource)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPolicyCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAccessDecisionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAccessDecisionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAccessDecisionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObjectRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventObjectRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventObjectRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectResource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectResource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObjectUnarchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventObjectUnarchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventObjectUnarchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectResource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectResource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
