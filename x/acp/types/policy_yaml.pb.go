// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcenetwork/sourcehub/acp/policy_yaml.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PolicyJSON struct {
	Name         string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreationDate *types.Timestamp         `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Metadata     map[string]string        `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resources    map[string]*ResourceJSON `protobuf:"bytes,5,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Actor        *ActorResource           `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`
	Version      string                   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PolicyJSON) Reset()         { *m = PolicyJSON{} }
func (m *PolicyJSON) String() string { return proto.CompactTextString(m) }
func (*PolicyJSON) ProtoMessage()    {}
func (*PolicyJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eaeaacb20894b73, []int{0}
}
func (m *PolicyJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyJSON.Merge(m, src)
}
func (m *PolicyJSON) XXX_Size() int {
	return m.Size()
}
func (m *PolicyJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyJSON.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyJSON proto.InternalMessageInfo

func (m *PolicyJSON) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyJSON) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicyJSON) GetCreationDate() *types.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *PolicyJSON) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PolicyJSON) GetResources() map[string]*ResourceJSON {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PolicyJSON) GetActor() *ActorResource {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *PolicyJSON) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ResourceJSON struct {
	Doc         string                     `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Permissions map[string]*PermissionJSON `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Relations   map[string]*RelationJSON   `protobuf:"bytes,3,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ResourceJSON) Reset()         { *m = ResourceJSON{} }
func (m *ResourceJSON) String() string { return proto.CompactTextString(m) }
func (*ResourceJSON) ProtoMessage()    {}
func (*ResourceJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eaeaacb20894b73, []int{1}
}
func (m *ResourceJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceJSON.Merge(m, src)
}
func (m *ResourceJSON) XXX_Size() int {
	return m.Size()
}
func (m *ResourceJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceJSON.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceJSON proto.InternalMessageInfo

func (m *ResourceJSON) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *ResourceJSON) GetPermissions() map[string]*PermissionJSON {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ResourceJSON) GetRelations() map[string]*RelationJSON {
	if m != nil {
		return m.Relations
	}
	return nil
}

type RelationJSON struct {
	Doc string `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	// list of relations managed by the current relation
	Manages []string `protobuf:"bytes,2,rep,name=manages,proto3" json:"manages,omitempty"`
	// value restriction types
	Types []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
}

func (m *RelationJSON) Reset()         { *m = RelationJSON{} }
func (m *RelationJSON) String() string { return proto.CompactTextString(m) }
func (*RelationJSON) ProtoMessage()    {}
func (*RelationJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eaeaacb20894b73, []int{2}
}
func (m *RelationJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationJSON.Merge(m, src)
}
func (m *RelationJSON) XXX_Size() int {
	return m.Size()
}
func (m *RelationJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationJSON.DiscardUnknown(m)
}

var xxx_messageInfo_RelationJSON proto.InternalMessageInfo

func (m *RelationJSON) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *RelationJSON) GetManages() []string {
	if m != nil {
		return m.Manages
	}
	return nil
}

func (m *RelationJSON) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type PermissionJSON struct {
	Doc  string `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (m *PermissionJSON) Reset()         { *m = PermissionJSON{} }
func (m *PermissionJSON) String() string { return proto.CompactTextString(m) }
func (*PermissionJSON) ProtoMessage()    {}
func (*PermissionJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eaeaacb20894b73, []int{3}
}
func (m *PermissionJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionJSON.Merge(m, src)
}
func (m *PermissionJSON) XXX_Size() int {
	return m.Size()
}
func (m *PermissionJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionJSON.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionJSON proto.InternalMessageInfo

func (m *PermissionJSON) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *PermissionJSON) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

func init() {
	proto.RegisterType((*PolicyJSON)(nil), "sourcenetwork.sourcehub.acp.PolicyJSON")
	proto.RegisterMapType((map[string]string)(nil), "sourcenetwork.sourcehub.acp.PolicyJSON.MetadataEntry")
	proto.RegisterMapType((map[string]*ResourceJSON)(nil), "sourcenetwork.sourcehub.acp.PolicyJSON.ResourcesEntry")
	proto.RegisterType((*ResourceJSON)(nil), "sourcenetwork.sourcehub.acp.ResourceJSON")
	proto.RegisterMapType((map[string]*PermissionJSON)(nil), "sourcenetwork.sourcehub.acp.ResourceJSON.PermissionsEntry")
	proto.RegisterMapType((map[string]*RelationJSON)(nil), "sourcenetwork.sourcehub.acp.ResourceJSON.RelationsEntry")
	proto.RegisterType((*RelationJSON)(nil), "sourcenetwork.sourcehub.acp.RelationJSON")
	proto.RegisterType((*PermissionJSON)(nil), "sourcenetwork.sourcehub.acp.PermissionJSON")
}

func init() {
	proto.RegisterFile("sourcenetwork/sourcehub/acp/policy_yaml.proto", fileDescriptor_4eaeaacb20894b73)
}

var fileDescriptor_4eaeaacb20894b73 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x8a, 0x13, 0x31,
	0x14, 0xee, 0xf4, 0x67, 0x6b, 0x4f, 0x77, 0x97, 0x25, 0x78, 0x11, 0x46, 0x18, 0x4b, 0xaf, 0xaa,
	0x62, 0x06, 0x2a, 0x2e, 0xcb, 0x7a, 0xb1, 0xae, 0x28, 0x88, 0xa0, 0xd6, 0x71, 0xf1, 0x42, 0x84,
	0x25, 0x4d, 0x63, 0x1d, 0xda, 0x69, 0x86, 0x4c, 0xba, 0x6e, 0xdf, 0xc2, 0x07, 0x11, 0x9f, 0xc3,
	0xcb, 0xbd, 0xf4, 0x52, 0xda, 0x17, 0x91, 0x24, 0x4d, 0x3b, 0x2d, 0xb5, 0x16, 0xbc, 0xcb, 0x49,
	0xce, 0xf7, 0x9d, 0x73, 0xbe, 0xef, 0x10, 0x78, 0x98, 0x89, 0xb1, 0x64, 0x7c, 0xc4, 0xd5, 0x57,
	0x21, 0x07, 0xa1, 0x8d, 0xbe, 0x8c, 0xbb, 0x21, 0x65, 0x69, 0x98, 0x8a, 0x61, 0xcc, 0x26, 0x97,
	0x13, 0x9a, 0x0c, 0x49, 0x2a, 0x85, 0x12, 0xe8, 0xce, 0x4a, 0x3a, 0x59, 0xa4, 0x13, 0xca, 0x52,
	0xff, 0x6e, 0x5f, 0x88, 0xfe, 0x90, 0x87, 0x26, 0xb5, 0x3b, 0xfe, 0x1c, 0xaa, 0x38, 0xe1, 0x99,
	0xa2, 0x49, 0x6a, 0xd1, 0x7e, 0xeb, 0xdf, 0xc5, 0x6c, 0x66, 0xf3, 0x47, 0x19, 0xa0, 0x63, 0x2e,
	0x5e, 0xbd, 0x7f, 0xfb, 0x06, 0x21, 0x28, 0x8f, 0x68, 0xc2, 0xb1, 0xd7, 0xf0, 0x5a, 0xb5, 0xc8,
	0x9c, 0x51, 0x03, 0xea, 0x3d, 0x9e, 0x31, 0x19, 0xa7, 0x2a, 0x16, 0x23, 0x5c, 0x34, 0x4f, 0xf9,
	0x2b, 0x74, 0x06, 0x07, 0x4c, 0x72, 0xaa, 0xcf, 0x97, 0x3d, 0xaa, 0x38, 0x2e, 0x35, 0xbc, 0x56,
	0xbd, 0xed, 0x13, 0xdb, 0x27, 0x71, 0x7d, 0x92, 0x0b, 0xd7, 0x67, 0xb4, 0xef, 0x00, 0xcf, 0xa9,
	0xe2, 0xe8, 0x1d, 0xdc, 0x4a, 0xb8, 0xa2, 0x3d, 0xaa, 0x28, 0x2e, 0x37, 0x4a, 0xad, 0x7a, 0xfb,
	0x31, 0xd9, 0x22, 0x00, 0x59, 0x76, 0x4c, 0x5e, 0xcf, 0x71, 0x2f, 0x46, 0x4a, 0x4e, 0xa2, 0x05,
	0x0d, 0xba, 0x80, 0x9a, 0xe4, 0x16, 0x95, 0xe1, 0x8a, 0xe1, 0x3c, 0xde, 0x95, 0x33, 0x72, 0x40,
	0x4b, 0xba, 0x24, 0x42, 0x4f, 0xa1, 0x42, 0x99, 0x12, 0x12, 0xef, 0x99, 0x09, 0xef, 0x6f, 0x65,
	0x3c, 0xd7, 0x99, 0x8e, 0x2b, 0xb2, 0x40, 0x84, 0xa1, 0x7a, 0xc5, 0x65, 0xa6, 0x95, 0xac, 0x1a,
	0x25, 0x5d, 0xe8, 0x3f, 0x81, 0x83, 0x95, 0x61, 0xd0, 0x11, 0x94, 0x06, 0x7c, 0x32, 0xf7, 0x42,
	0x1f, 0xd1, 0x6d, 0xa8, 0x5c, 0xd1, 0xe1, 0x98, 0xcf, 0x4d, 0xb0, 0xc1, 0x69, 0xf1, 0xc4, 0xf3,
	0xfb, 0x70, 0xb8, 0xda, 0xf5, 0x06, 0xf4, 0x59, 0x1e, 0x5d, 0x6f, 0xdf, 0xdb, 0xda, 0xbc, 0x63,
	0xd3, 0x82, 0xe4, 0x0a, 0x35, 0xbf, 0x97, 0x60, 0x3f, 0xff, 0xa6, 0xeb, 0xf4, 0x04, 0x73, 0x75,
	0x7a, 0x82, 0xa1, 0x4f, 0x50, 0x4f, 0xb9, 0x4c, 0xe2, 0x4c, 0x8f, 0x95, 0xe1, 0xa2, 0x11, 0xff,
	0x74, 0xe7, 0x6a, 0xa4, 0xb3, 0x04, 0x5b, 0x03, 0xf2, 0x74, 0xe8, 0x83, 0x36, 0x76, 0x68, 0x76,
	0x27, 0xc3, 0x25, 0xc3, 0x7d, 0xb2, 0x3b, 0x77, 0xe4, 0xa0, 0x0b, 0x6b, 0xe7, 0xb1, 0x3f, 0x80,
	0xa3, 0xf5, 0xc2, 0x1b, 0x34, 0x3c, 0x5f, 0xd5, 0xf0, 0xc1, 0xf6, 0x95, 0x5a, 0xf0, 0xad, 0xa9,
	0x68, 0xed, 0xca, 0x77, 0xf2, 0xff, 0x76, 0x59, 0xb6, 0x75, 0xbb, 0x3a, 0xda, 0xad, 0xe5, 0xd3,
	0x06, 0xb7, 0x30, 0x54, 0x13, 0x3a, 0xa2, 0x7d, 0x6e, 0x9d, 0xaa, 0x45, 0x2e, 0xd4, 0xdb, 0xa6,
	0x26, 0x29, 0xb7, 0x2a, 0xd7, 0x22, 0x1b, 0x34, 0x8f, 0xe1, 0x70, 0x75, 0xae, 0x0d, 0x9c, 0x08,
	0xca, 0xfc, 0x3a, 0x95, 0xf3, 0x35, 0x35, 0xe7, 0x67, 0x2f, 0x7f, 0x4e, 0x03, 0xef, 0x66, 0x1a,
	0x78, 0xbf, 0xa7, 0x81, 0xf7, 0x6d, 0x16, 0x14, 0x6e, 0x66, 0x41, 0xe1, 0xd7, 0x2c, 0x28, 0x7c,
	0x24, 0xfd, 0x58, 0xe9, 0x39, 0x98, 0x48, 0xc2, 0xbf, 0x7d, 0x5c, 0xd7, 0xe6, 0xeb, 0x32, 0x1d,
	0x74, 0xf7, 0xcc, 0x7f, 0xf2, 0xe8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0x85, 0x99, 0x3e,
	0x53, 0x05, 0x00, 0x00,
}

func (m *PolicyJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyYaml(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyYaml(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyYaml(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyYaml(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CreationDate != nil {
		{
			size, err := m.CreationDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyYaml(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for k := range m.Relations {
			v := m.Relations[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyYaml(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyYaml(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Permissions) > 0 {
		for k := range m.Permissions {
			v := m.Permissions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyYaml(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyYaml(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Manages) > 0 {
		for iNdEx := len(m.Manages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Manages[iNdEx])
			copy(dAtA[i:], m.Manages[iNdEx])
			i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Manages[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyYaml(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicyYaml(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyYaml(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	if m.CreationDate != nil {
		l = m.CreationDate.Size()
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPolicyYaml(uint64(len(k))) + 1 + len(v) + sovPolicyYaml(uint64(len(v)))
			n += mapEntrySize + 1 + sovPolicyYaml(uint64(mapEntrySize))
		}
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyYaml(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyYaml(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyYaml(uint64(mapEntrySize))
		}
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	return n
}

func (m *ResourceJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	if len(m.Permissions) > 0 {
		for k, v := range m.Permissions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyYaml(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyYaml(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyYaml(uint64(mapEntrySize))
		}
	}
	if len(m.Relations) > 0 {
		for k, v := range m.Relations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyYaml(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyYaml(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyYaml(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RelationJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	if len(m.Manages) > 0 {
		for _, s := range m.Manages {
			l = len(s)
			n += 1 + l + sovPolicyYaml(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovPolicyYaml(uint64(l))
		}
	}
	return n
}

func (m *PermissionJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovPolicyYaml(uint64(l))
	}
	return n
}

func sovPolicyYaml(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyYaml(x uint64) (n int) {
	return sovPolicyYaml(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyYaml
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationDate == nil {
				m.CreationDate = &types.Timestamp{}
			}
			if err := m.CreationDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyYaml
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyYaml(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[string]*ResourceJSON)
			}
			var mapkey string
			var mapvalue *ResourceJSON
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyYaml
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceJSON{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyYaml(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &ActorResource{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyYaml(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyYaml
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = make(map[string]*PermissionJSON)
			}
			var mapkey string
			var mapvalue *PermissionJSON
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyYaml
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PermissionJSON{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyYaml(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Permissions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relations == nil {
				m.Relations = make(map[string]*RelationJSON)
			}
			var mapkey string
			var mapvalue *RelationJSON
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyYaml
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyYaml
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RelationJSON{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyYaml(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyYaml
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Relations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyYaml(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyYaml
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manages = append(m.Manages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyYaml(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyYaml
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyYaml(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyYaml
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyYaml(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyYaml
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyYaml
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyYaml
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyYaml
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyYaml
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyYaml        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyYaml          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyYaml = fmt.Errorf("proto: unexpected end of group")
)
