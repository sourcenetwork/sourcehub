// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sourcenetwork/sourcehub/acp/relationship_selector.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RelationshipSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipSelectorMultiError, or nil if none found.
func (m *RelationshipSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetObjectSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "ObjectSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "ObjectSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObjectSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipSelectorValidationError{
				field:  "ObjectSelector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRelationSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "RelationSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "RelationSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipSelectorValidationError{
				field:  "RelationSelector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubjectSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "SubjectSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipSelectorValidationError{
					field:  "SubjectSelector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubjectSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipSelectorValidationError{
				field:  "SubjectSelector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationshipSelectorMultiError(errors)
	}

	return nil
}

// RelationshipSelectorMultiError is an error wrapping multiple validation
// errors returned by RelationshipSelector.ValidateAll() if the designated
// constraints aren't met.
type RelationshipSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipSelectorMultiError) AllErrors() []error { return m }

// RelationshipSelectorValidationError is the validation error returned by
// RelationshipSelector.Validate if the designated constraints aren't met.
type RelationshipSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipSelectorValidationError) ErrorName() string {
	return "RelationshipSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipSelectorValidationError{}

// Validate checks the field values on ObjectSelector with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectSelectorMultiError,
// or nil if none found.
func (m *ObjectSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Selector.(type) {
	case *ObjectSelector_Object:
		if v == nil {
			err := ObjectSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectSelectorValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectSelectorValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectSelectorValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ObjectSelector_Wildcard:
		if v == nil {
			err := ObjectSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWildcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWildcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectSelectorValidationError{
					field:  "Wildcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ObjectSelectorMultiError(errors)
	}

	return nil
}

// ObjectSelectorMultiError is an error wrapping multiple validation errors
// returned by ObjectSelector.ValidateAll() if the designated constraints
// aren't met.
type ObjectSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectSelectorMultiError) AllErrors() []error { return m }

// ObjectSelectorValidationError is the validation error returned by
// ObjectSelector.Validate if the designated constraints aren't met.
type ObjectSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectSelectorValidationError) ErrorName() string { return "ObjectSelectorValidationError" }

// Error satisfies the builtin error interface
func (e ObjectSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectSelectorValidationError{}

// Validate checks the field values on RelationSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelationSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationSelectorMultiError, or nil if none found.
func (m *RelationSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Selector.(type) {
	case *RelationSelector_Relation:
		if v == nil {
			err := RelationSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Relation
	case *RelationSelector_Wildcard:
		if v == nil {
			err := RelationSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWildcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWildcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationSelectorValidationError{
					field:  "Wildcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RelationSelectorMultiError(errors)
	}

	return nil
}

// RelationSelectorMultiError is an error wrapping multiple validation errors
// returned by RelationSelector.ValidateAll() if the designated constraints
// aren't met.
type RelationSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationSelectorMultiError) AllErrors() []error { return m }

// RelationSelectorValidationError is the validation error returned by
// RelationSelector.Validate if the designated constraints aren't met.
type RelationSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationSelectorValidationError) ErrorName() string { return "RelationSelectorValidationError" }

// Error satisfies the builtin error interface
func (e RelationSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationSelectorValidationError{}

// Validate checks the field values on SubjectSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubjectSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectSelectorMultiError, or nil if none found.
func (m *SubjectSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Selector.(type) {
	case *SubjectSelector_Subject:
		if v == nil {
			err := SubjectSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSubject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectSelectorValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectSelectorValidationError{
						field:  "Subject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectSelectorValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubjectSelector_Wildcard:
		if v == nil {
			err := SubjectSelectorValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWildcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectSelectorValidationError{
						field:  "Wildcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWildcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectSelectorValidationError{
					field:  "Wildcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SubjectSelectorMultiError(errors)
	}

	return nil
}

// SubjectSelectorMultiError is an error wrapping multiple validation errors
// returned by SubjectSelector.ValidateAll() if the designated constraints
// aren't met.
type SubjectSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectSelectorMultiError) AllErrors() []error { return m }

// SubjectSelectorValidationError is the validation error returned by
// SubjectSelector.Validate if the designated constraints aren't met.
type SubjectSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectSelectorValidationError) ErrorName() string { return "SubjectSelectorValidationError" }

// Error satisfies the builtin error interface
func (e SubjectSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectSelectorValidationError{}

// Validate checks the field values on WildcardSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WildcardSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WildcardSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WildcardSelectorMultiError, or nil if none found.
func (m *WildcardSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *WildcardSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WildcardSelectorMultiError(errors)
	}

	return nil
}

// WildcardSelectorMultiError is an error wrapping multiple validation errors
// returned by WildcardSelector.ValidateAll() if the designated constraints
// aren't met.
type WildcardSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WildcardSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WildcardSelectorMultiError) AllErrors() []error { return m }

// WildcardSelectorValidationError is the validation error returned by
// WildcardSelector.Validate if the designated constraints aren't met.
type WildcardSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WildcardSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WildcardSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WildcardSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WildcardSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WildcardSelectorValidationError) ErrorName() string { return "WildcardSelectorValidationError" }

// Error satisfies the builtin error interface
func (e WildcardSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWildcardSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WildcardSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WildcardSelectorValidationError{}
