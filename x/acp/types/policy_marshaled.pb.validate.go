// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sourcenetwork/sourcehub/acp/policy_marshaled.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyShort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyShort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyShortMultiError, or
// nil if none found.
func (m *PolicyShort) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Meta

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PolicyShortValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PolicyShortValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PolicyShortValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyShortValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyShortValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyShortValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return PolicyShortMultiError(errors)
	}

	return nil
}

// PolicyShortMultiError is an error wrapping multiple validation errors
// returned by PolicyShort.ValidateAll() if the designated constraints aren't met.
type PolicyShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyShortMultiError) AllErrors() []error { return m }

// PolicyShortValidationError is the validation error returned by
// PolicyShort.Validate if the designated constraints aren't met.
type PolicyShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyShortValidationError) ErrorName() string { return "PolicyShortValidationError" }

// Error satisfies the builtin error interface
func (e PolicyShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyShortValidationError{}

// Validate checks the field values on ResourceShort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceShort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceShortMultiError, or
// nil if none found.
func (m *ResourceShort) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Doc

	{
		sorted_keys := make([]string, len(m.GetPermissions()))
		i := 0
		for key := range m.GetPermissions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPermissions()[key]
			_ = val

			// no validation rules for Permissions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResourceShortValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResourceShortValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResourceShortValidationError{
						field:  fmt.Sprintf("Permissions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetRelations()))
		i := 0
		for key := range m.GetRelations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRelations()[key]
			_ = val

			// no validation rules for Relations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResourceShortValidationError{
							field:  fmt.Sprintf("Relations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResourceShortValidationError{
							field:  fmt.Sprintf("Relations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResourceShortValidationError{
						field:  fmt.Sprintf("Relations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ResourceShortMultiError(errors)
	}

	return nil
}

// ResourceShortMultiError is an error wrapping multiple validation errors
// returned by ResourceShort.ValidateAll() if the designated constraints
// aren't met.
type ResourceShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceShortMultiError) AllErrors() []error { return m }

// ResourceShortValidationError is the validation error returned by
// ResourceShort.Validate if the designated constraints aren't met.
type ResourceShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceShortValidationError) ErrorName() string { return "ResourceShortValidationError" }

// Error satisfies the builtin error interface
func (e ResourceShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceShortValidationError{}

// Validate checks the field values on RelationShort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelationShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationShort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationShortMultiError, or
// nil if none found.
func (m *RelationShort) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Doc

	if len(errors) > 0 {
		return RelationShortMultiError(errors)
	}

	return nil
}

// RelationShortMultiError is an error wrapping multiple validation errors
// returned by RelationShort.ValidateAll() if the designated constraints
// aren't met.
type RelationShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationShortMultiError) AllErrors() []error { return m }

// RelationShortValidationError is the validation error returned by
// RelationShort.Validate if the designated constraints aren't met.
type RelationShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationShortValidationError) ErrorName() string { return "RelationShortValidationError" }

// Error satisfies the builtin error interface
func (e RelationShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationShortValidationError{}

// Validate checks the field values on PermissionShort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionShortMultiError, or nil if none found.
func (m *PermissionShort) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Doc

	// no validation rules for Expr

	if len(errors) > 0 {
		return PermissionShortMultiError(errors)
	}

	return nil
}

// PermissionShortMultiError is an error wrapping multiple validation errors
// returned by PermissionShort.ValidateAll() if the designated constraints
// aren't met.
type PermissionShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionShortMultiError) AllErrors() []error { return m }

// PermissionShortValidationError is the validation error returned by
// PermissionShort.Validate if the designated constraints aren't met.
type PermissionShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionShortValidationError) ErrorName() string { return "PermissionShortValidationError" }

// Error satisfies the builtin error interface
func (e PermissionShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionShortValidationError{}
