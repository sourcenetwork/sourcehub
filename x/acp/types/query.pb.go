// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryPolicyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPolicyRequest) Reset()         { *m = QueryPolicyRequest{} }
func (m *QueryPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyRequest) ProtoMessage()    {}
func (*QueryPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{2}
}
func (m *QueryPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyRequest.Merge(m, src)
}
func (m *QueryPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyRequest proto.InternalMessageInfo

func (m *QueryPolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryPolicyResponse struct {
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *QueryPolicyResponse) Reset()         { *m = QueryPolicyResponse{} }
func (m *QueryPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyResponse) ProtoMessage()    {}
func (*QueryPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{3}
}
func (m *QueryPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyResponse.Merge(m, src)
}
func (m *QueryPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyResponse proto.InternalMessageInfo

func (m *QueryPolicyResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type QueryPolicyIdsRequest struct {
}

func (m *QueryPolicyIdsRequest) Reset()         { *m = QueryPolicyIdsRequest{} }
func (m *QueryPolicyIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyIdsRequest) ProtoMessage()    {}
func (*QueryPolicyIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{4}
}
func (m *QueryPolicyIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyIdsRequest.Merge(m, src)
}
func (m *QueryPolicyIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyIdsRequest proto.InternalMessageInfo

type QueryPolicyIdsResponse struct {
	//cosmos.base.query.v1beta1.PageResponse pagination = 1;
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *QueryPolicyIdsResponse) Reset()         { *m = QueryPolicyIdsResponse{} }
func (m *QueryPolicyIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPolicyIdsResponse) ProtoMessage()    {}
func (*QueryPolicyIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{5}
}
func (m *QueryPolicyIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPolicyIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPolicyIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPolicyIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPolicyIdsResponse.Merge(m, src)
}
func (m *QueryPolicyIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPolicyIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPolicyIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPolicyIdsResponse proto.InternalMessageInfo

func (m *QueryPolicyIdsResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type QueryFilterRelationshipsRequest struct {
	PolicyId string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Selector *RelationshipSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (m *QueryFilterRelationshipsRequest) Reset()         { *m = QueryFilterRelationshipsRequest{} }
func (m *QueryFilterRelationshipsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFilterRelationshipsRequest) ProtoMessage()    {}
func (*QueryFilterRelationshipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{6}
}
func (m *QueryFilterRelationshipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterRelationshipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterRelationshipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterRelationshipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterRelationshipsRequest.Merge(m, src)
}
func (m *QueryFilterRelationshipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterRelationshipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterRelationshipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterRelationshipsRequest proto.InternalMessageInfo

func (m *QueryFilterRelationshipsRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *QueryFilterRelationshipsRequest) GetSelector() *RelationshipSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

type QueryFilterRelationshipsResponse struct {
	Records []*RelationshipRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *QueryFilterRelationshipsResponse) Reset()         { *m = QueryFilterRelationshipsResponse{} }
func (m *QueryFilterRelationshipsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFilterRelationshipsResponse) ProtoMessage()    {}
func (*QueryFilterRelationshipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{7}
}
func (m *QueryFilterRelationshipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterRelationshipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterRelationshipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterRelationshipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterRelationshipsResponse.Merge(m, src)
}
func (m *QueryFilterRelationshipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterRelationshipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterRelationshipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterRelationshipsResponse proto.InternalMessageInfo

func (m *QueryFilterRelationshipsResponse) GetRecords() []*RelationshipRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type QueryVerifyAccessRequestRequest struct {
	PolicyId      string         `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	AccessRequest *AccessRequest `protobuf:"bytes,2,opt,name=access_request,json=accessRequest,proto3" json:"access_request,omitempty"`
}

func (m *QueryVerifyAccessRequestRequest) Reset()         { *m = QueryVerifyAccessRequestRequest{} }
func (m *QueryVerifyAccessRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAccessRequestRequest) ProtoMessage()    {}
func (*QueryVerifyAccessRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{8}
}
func (m *QueryVerifyAccessRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAccessRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAccessRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAccessRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAccessRequestRequest.Merge(m, src)
}
func (m *QueryVerifyAccessRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAccessRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAccessRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAccessRequestRequest proto.InternalMessageInfo

func (m *QueryVerifyAccessRequestRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *QueryVerifyAccessRequestRequest) GetAccessRequest() *AccessRequest {
	if m != nil {
		return m.AccessRequest
	}
	return nil
}

type QueryVerifyAccessRequestResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryVerifyAccessRequestResponse) Reset()         { *m = QueryVerifyAccessRequestResponse{} }
func (m *QueryVerifyAccessRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAccessRequestResponse) ProtoMessage()    {}
func (*QueryVerifyAccessRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{9}
}
func (m *QueryVerifyAccessRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAccessRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAccessRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAccessRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAccessRequestResponse.Merge(m, src)
}
func (m *QueryVerifyAccessRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAccessRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAccessRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAccessRequestResponse proto.InternalMessageInfo

func (m *QueryVerifyAccessRequestResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type QueryValidatePolicyRequest struct {
	Policy      string               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	MarshalType PolicyMarshalingType `protobuf:"varint,3,opt,name=marshal_type,json=marshalType,proto3,enum=sourcehub.acp.PolicyMarshalingType" json:"marshal_type,omitempty"`
}

func (m *QueryValidatePolicyRequest) Reset()         { *m = QueryValidatePolicyRequest{} }
func (m *QueryValidatePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatePolicyRequest) ProtoMessage()    {}
func (*QueryValidatePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{10}
}
func (m *QueryValidatePolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatePolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatePolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatePolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatePolicyRequest.Merge(m, src)
}
func (m *QueryValidatePolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatePolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatePolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatePolicyRequest proto.InternalMessageInfo

func (m *QueryValidatePolicyRequest) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *QueryValidatePolicyRequest) GetMarshalType() PolicyMarshalingType {
	if m != nil {
		return m.MarshalType
	}
	return PolicyMarshalingType_UNKNOWN
}

type QueryValidatePolicyResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryValidatePolicyResponse) Reset()         { *m = QueryValidatePolicyResponse{} }
func (m *QueryValidatePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatePolicyResponse) ProtoMessage()    {}
func (*QueryValidatePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{11}
}
func (m *QueryValidatePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatePolicyResponse.Merge(m, src)
}
func (m *QueryValidatePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatePolicyResponse proto.InternalMessageInfo

func (m *QueryValidatePolicyResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type QueryAccessDecisionRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAccessDecisionRequest) Reset()         { *m = QueryAccessDecisionRequest{} }
func (m *QueryAccessDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccessDecisionRequest) ProtoMessage()    {}
func (*QueryAccessDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{12}
}
func (m *QueryAccessDecisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccessDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccessDecisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccessDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccessDecisionRequest.Merge(m, src)
}
func (m *QueryAccessDecisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccessDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccessDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccessDecisionRequest proto.InternalMessageInfo

func (m *QueryAccessDecisionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryAccessDecisionResponse struct {
	Decision *AccessDecision `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"`
}

func (m *QueryAccessDecisionResponse) Reset()         { *m = QueryAccessDecisionResponse{} }
func (m *QueryAccessDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccessDecisionResponse) ProtoMessage()    {}
func (*QueryAccessDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{13}
}
func (m *QueryAccessDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccessDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccessDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccessDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccessDecisionResponse.Merge(m, src)
}
func (m *QueryAccessDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccessDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccessDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccessDecisionResponse proto.InternalMessageInfo

func (m *QueryAccessDecisionResponse) GetDecision() *AccessDecision {
	if m != nil {
		return m.Decision
	}
	return nil
}

type QueryObjectOwnerRequest struct {
	PolicyId string  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Object   *Object `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *QueryObjectOwnerRequest) Reset()         { *m = QueryObjectOwnerRequest{} }
func (m *QueryObjectOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryObjectOwnerRequest) ProtoMessage()    {}
func (*QueryObjectOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{14}
}
func (m *QueryObjectOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObjectOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObjectOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObjectOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObjectOwnerRequest.Merge(m, src)
}
func (m *QueryObjectOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryObjectOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObjectOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObjectOwnerRequest proto.InternalMessageInfo

func (m *QueryObjectOwnerRequest) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *QueryObjectOwnerRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type QueryObjectOwnerResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	// Types that are valid to be assigned to XOwnerId:
	//
	//	*QueryObjectOwnerResponse_OwnerId
	XOwnerId isQueryObjectOwnerResponse_XOwnerId `protobuf_oneof:"_owner_id"`
}

func (m *QueryObjectOwnerResponse) Reset()         { *m = QueryObjectOwnerResponse{} }
func (m *QueryObjectOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObjectOwnerResponse) ProtoMessage()    {}
func (*QueryObjectOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e48f8debbc27977, []int{15}
}
func (m *QueryObjectOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObjectOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObjectOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObjectOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObjectOwnerResponse.Merge(m, src)
}
func (m *QueryObjectOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObjectOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObjectOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObjectOwnerResponse proto.InternalMessageInfo

type isQueryObjectOwnerResponse_XOwnerId interface {
	isQueryObjectOwnerResponse_XOwnerId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryObjectOwnerResponse_OwnerId struct {
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
}

func (*QueryObjectOwnerResponse_OwnerId) isQueryObjectOwnerResponse_XOwnerId() {}

func (m *QueryObjectOwnerResponse) GetXOwnerId() isQueryObjectOwnerResponse_XOwnerId {
	if m != nil {
		return m.XOwnerId
	}
	return nil
}

func (m *QueryObjectOwnerResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *QueryObjectOwnerResponse) GetOwnerId() string {
	if x, ok := m.GetXOwnerId().(*QueryObjectOwnerResponse_OwnerId); ok {
		return x.OwnerId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryObjectOwnerResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryObjectOwnerResponse_OwnerId)(nil),
	}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "sourcehub.acp.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "sourcehub.acp.QueryParamsResponse")
	proto.RegisterType((*QueryPolicyRequest)(nil), "sourcehub.acp.QueryPolicyRequest")
	proto.RegisterType((*QueryPolicyResponse)(nil), "sourcehub.acp.QueryPolicyResponse")
	proto.RegisterType((*QueryPolicyIdsRequest)(nil), "sourcehub.acp.QueryPolicyIdsRequest")
	proto.RegisterType((*QueryPolicyIdsResponse)(nil), "sourcehub.acp.QueryPolicyIdsResponse")
	proto.RegisterType((*QueryFilterRelationshipsRequest)(nil), "sourcehub.acp.QueryFilterRelationshipsRequest")
	proto.RegisterType((*QueryFilterRelationshipsResponse)(nil), "sourcehub.acp.QueryFilterRelationshipsResponse")
	proto.RegisterType((*QueryVerifyAccessRequestRequest)(nil), "sourcehub.acp.QueryVerifyAccessRequestRequest")
	proto.RegisterType((*QueryVerifyAccessRequestResponse)(nil), "sourcehub.acp.QueryVerifyAccessRequestResponse")
	proto.RegisterType((*QueryValidatePolicyRequest)(nil), "sourcehub.acp.QueryValidatePolicyRequest")
	proto.RegisterType((*QueryValidatePolicyResponse)(nil), "sourcehub.acp.QueryValidatePolicyResponse")
	proto.RegisterType((*QueryAccessDecisionRequest)(nil), "sourcehub.acp.QueryAccessDecisionRequest")
	proto.RegisterType((*QueryAccessDecisionResponse)(nil), "sourcehub.acp.QueryAccessDecisionResponse")
	proto.RegisterType((*QueryObjectOwnerRequest)(nil), "sourcehub.acp.QueryObjectOwnerRequest")
	proto.RegisterType((*QueryObjectOwnerResponse)(nil), "sourcehub.acp.QueryObjectOwnerResponse")
}

func init() { proto.RegisterFile("sourcehub/acp/query.proto", fileDescriptor_0e48f8debbc27977) }

var fileDescriptor_0e48f8debbc27977 = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0xaa, 0x6b, 0x3f, 0x37, 0x16, 0x4c, 0xd2, 0x36, 0x6c, 0x8b, 0x1b, 0x26, 0x2d,
	0x4d, 0x0c, 0xf5, 0x92, 0x44, 0x88, 0x56, 0xa8, 0x14, 0x42, 0x89, 0xda, 0x03, 0x0a, 0x6c, 0x01,
	0x21, 0x38, 0xac, 0xd6, 0xeb, 0xa9, 0x33, 0x60, 0x7b, 0xb6, 0x3b, 0x9b, 0x94, 0x28, 0x8d, 0x10,
	0x70, 0x81, 0x1b, 0x12, 0xff, 0xa0, 0x07, 0xc4, 0x91, 0x3b, 0x82, 0x73, 0x8f, 0x95, 0xb8, 0x70,
	0x42, 0x28, 0x41, 0xe2, 0x6f, 0xa0, 0x9d, 0x79, 0xbb, 0xf1, 0x3a, 0xb3, 0x5b, 0x5f, 0xec, 0x9d,
	0x99, 0xef, 0xbd, 0xef, 0x7b, 0x33, 0x6f, 0xbe, 0x5d, 0x78, 0x41, 0x8a, 0x9d, 0x28, 0x60, 0xdb,
	0x3b, 0x1d, 0xc7, 0x0f, 0x42, 0xe7, 0xc1, 0x0e, 0x8b, 0xf6, 0xda, 0x61, 0x24, 0x62, 0x41, 0x66,
	0xb3, 0xa5, 0xb6, 0x1f, 0x84, 0xf6, 0xf3, 0xfe, 0x80, 0x0f, 0x85, 0xa3, 0x7e, 0x35, 0xc2, 0x6e,
	0x05, 0x42, 0x0e, 0x84, 0x74, 0x3a, 0xbe, 0x64, 0x3a, 0xd4, 0xd9, 0x5d, 0xed, 0xb0, 0xd8, 0x5f,
	0x75, 0x42, 0xbf, 0xc7, 0x87, 0x7e, 0xcc, 0xc5, 0x10, 0xb1, 0xf3, 0x3d, 0xd1, 0x13, 0xea, 0xd1,
	0x49, 0x9e, 0x70, 0xf6, 0x62, 0x4f, 0x88, 0x5e, 0x9f, 0x39, 0x7e, 0xc8, 0x1d, 0x7f, 0x38, 0x14,
	0xb1, 0x0a, 0x91, 0xb8, 0xba, 0x94, 0x17, 0xe7, 0x07, 0x01, 0x93, 0xd2, 0xeb, 0xb2, 0x80, 0xcb,
	0xe3, 0xc4, 0x76, 0x1e, 0x14, 0xfa, 0x91, 0x3f, 0x90, 0x05, 0x6b, 0xa2, 0xcf, 0x03, 0x2c, 0xcf,
	0x5e, 0x34, 0xad, 0x79, 0x72, 0x5b, 0x44, 0xb1, 0x19, 0x11, 0xb1, 0xbe, 0x56, 0xb7, 0xcd, 0x43,
	0x44, 0xac, 0x14, 0x23, 0x3c, 0xc9, 0xfa, 0x2c, 0x88, 0x45, 0xa4, 0xa1, 0x74, 0x1e, 0xc8, 0x87,
	0xc9, 0x0e, 0x7d, 0xa0, 0xf4, 0xb9, 0xec, 0xc1, 0x0e, 0x93, 0x31, 0xdd, 0x82, 0xb9, 0xdc, 0xac,
	0x0c, 0xc5, 0x50, 0x32, 0x72, 0x1d, 0x2a, 0xba, 0x8e, 0x05, 0x6b, 0xd1, 0x5a, 0xae, 0xaf, 0x9d,
	0x6d, 0xe7, 0xce, 0xa2, 0xad, 0xe1, 0x1b, 0xb5, 0x27, 0x7f, 0x5f, 0x9a, 0xfa, 0xe5, 0xbf, 0x5f,
	0x5b, 0x96, 0x8b, 0x78, 0x7a, 0x39, 0xa5, 0x51, 0xe5, 0x20, 0x0d, 0x69, 0xc0, 0x34, 0xef, 0xaa,
	0x5c, 0x35, 0x77, 0x9a, 0x77, 0xe9, 0xed, 0x94, 0x16, 0x51, 0x48, 0x7b, 0x0d, 0x2a, 0x7a, 0x1b,
	0x8a, 0x68, 0x35, 0x1c, 0x41, 0xf4, 0x3c, 0x9c, 0x1d, 0xc9, 0x72, 0xb7, 0x9b, 0x55, 0xd5, 0x82,
	0x73, 0xe3, 0x0b, 0xc8, 0xf0, 0x1c, 0xcc, 0xf0, 0x6e, 0x52, 0xd5, 0xcc, 0x72, 0xcd, 0x4d, 0x1e,
	0xe9, 0xd7, 0x70, 0x49, 0x61, 0x37, 0x79, 0x3f, 0x66, 0x91, 0x3b, 0xb2, 0x83, 0x69, 0x3a, 0x72,
	0x01, 0x6a, 0x78, 0x3a, 0x59, 0x11, 0xd5, 0x10, 0x53, 0x93, 0x5b, 0x50, 0x4d, 0x77, 0x7a, 0x61,
	0x5a, 0xa9, 0x5e, 0x1a, 0x53, 0x3d, 0x9a, 0xf3, 0x1e, 0x42, 0xdd, 0x2c, 0x88, 0x7a, 0xb0, 0x58,
	0x2c, 0x00, 0x65, 0xbf, 0x09, 0xa7, 0x23, 0x16, 0x88, 0x08, 0xa5, 0xd7, 0xd7, 0x5e, 0x2a, 0xe1,
	0x70, 0x15, 0xd2, 0x4d, 0x23, 0xe8, 0x77, 0x16, 0x96, 0xf8, 0x09, 0x8b, 0xf8, 0xfd, 0xbd, 0x77,
	0x54, 0x17, 0x63, 0x6d, 0x13, 0x95, 0xf8, 0x2e, 0x34, 0xb0, 0xf5, 0x23, 0x0d, 0xc7, 0x42, 0x2f,
	0x8e, 0x89, 0xc8, 0x67, 0x9e, 0xf5, 0x47, 0x87, 0xf4, 0x3a, 0x96, 0x69, 0x14, 0x81, 0x65, 0xce,
	0xc3, 0xa9, 0x5d, 0xbf, 0x8f, 0x0a, 0xaa, 0xae, 0x1e, 0xd0, 0x47, 0x60, 0xeb, 0xc8, 0x64, 0xe4,
	0xc7, 0x2c, 0xdf, 0x5a, 0xe7, 0x72, 0x3d, 0x53, 0x4b, 0x9b, 0x83, 0x6c, 0xc2, 0x99, 0x81, 0x1f,
	0xc9, 0x6d, 0xbf, 0xef, 0xc5, 0x7b, 0x21, 0x5b, 0x98, 0x59, 0xb4, 0x96, 0x1b, 0x27, 0xce, 0x46,
	0xe7, 0x7a, 0x5f, 0x03, 0xf9, 0xb0, 0xf7, 0xd1, 0x5e, 0xc8, 0xdc, 0x3a, 0x06, 0x26, 0x03, 0xba,
	0x0e, 0x17, 0x8c, 0xec, 0xa5, 0x92, 0x5f, 0x45, 0xc9, 0xba, 0xcc, 0xdb, 0x68, 0x18, 0x45, 0xb7,
	0xe1, 0x53, 0xa4, 0x18, 0x47, 0x23, 0xc5, 0x0d, 0xa8, 0xa6, 0x96, 0x83, 0xf7, 0xe2, 0x45, 0xe3,
	0xc6, 0x67, 0x81, 0x19, 0x9c, 0x32, 0x38, 0xaf, 0x32, 0x6f, 0x75, 0xbe, 0x60, 0x41, 0xbc, 0xf5,
	0x70, 0x98, 0x34, 0xd8, 0x04, 0x27, 0x7e, 0x0d, 0x2a, 0x42, 0x85, 0xe0, 0x49, 0x8f, 0x5f, 0x44,
	0x9d, 0xcf, 0x45, 0x10, 0xed, 0xc3, 0xc2, 0x49, 0x1a, 0x54, 0xbf, 0x04, 0xb3, 0x3c, 0x69, 0x9c,
	0x1e, 0x97, 0x31, 0x8b, 0x58, 0xba, 0x51, 0x67, 0xb8, 0x74, 0xb3, 0x39, 0xd2, 0x84, 0xaa, 0x48,
	0xa2, 0x12, 0x2d, 0x09, 0x63, 0xed, 0xce, 0x94, 0x7b, 0x5a, 0xcd, 0xdc, 0xed, 0x7e, 0x6f, 0x59,
	0x1b, 0x75, 0xa8, 0x79, 0x29, 0x60, 0xed, 0x31, 0xc0, 0x29, 0x45, 0x47, 0x1e, 0x41, 0x45, 0x3b,
	0x11, 0x19, 0xbf, 0x0f, 0x27, 0xad, 0xce, 0xa6, 0x65, 0x10, 0x2d, 0x96, 0xbe, 0xf2, 0xed, 0x9f,
	0xff, 0xfe, 0x34, 0x7d, 0x85, 0x2c, 0x39, 0x1a, 0x3b, 0x64, 0xf1, 0x43, 0x11, 0x7d, 0xe9, 0x98,
	0x2c, 0x9e, 0x7c, 0x63, 0x41, 0x45, 0x77, 0x43, 0x01, 0xfd, 0x68, 0x9f, 0x16, 0xd0, 0xe7, 0x9a,
	0x89, 0xbe, 0xa6, 0xe8, 0x5b, 0x64, 0xb9, 0x9c, 0x5e, 0x05, 0x39, 0xfb, 0xbc, 0x7b, 0x40, 0x7e,
	0xb0, 0xa0, 0x96, 0xb9, 0x1c, 0xb9, 0x5c, 0xcc, 0x71, 0xec, 0x8e, 0xf6, 0x95, 0x67, 0xa0, 0x50,
	0x8c, 0xa3, 0xc4, 0xac, 0x90, 0xab, 0x13, 0x88, 0xf1, 0x78, 0x57, 0x92, 0xdf, 0x2d, 0x98, 0x33,
	0x98, 0x18, 0x69, 0x9b, 0xf8, 0x8a, 0xed, 0xd6, 0x76, 0x26, 0xc6, 0xa3, 0xd2, 0xf7, 0x94, 0xd2,
	0x5b, 0xe4, 0x66, 0xa9, 0xd2, 0xfb, 0x2a, 0x83, 0x37, 0xfa, 0x8e, 0x94, 0xce, 0x7e, 0xa6, 0xff,
	0x80, 0xfc, 0x61, 0xc1, 0x9c, 0xc1, 0x9d, 0xcc, 0xfa, 0x8b, 0xbd, 0xd4, 0xac, 0xbf, 0xc4, 0xf6,
	0xe8, 0xa6, 0xd2, 0xff, 0x36, 0x79, 0xab, 0x54, 0xff, 0xae, 0xca, 0xe0, 0xe5, 0x9d, 0x38, 0x57,
	0xc0, 0xcf, 0x16, 0x34, 0xf2, 0x36, 0x45, 0x56, 0x8c, 0x5a, 0x4c, 0x46, 0x6a, 0xb7, 0x26, 0x81,
	0xa2, 0xe2, 0x9b, 0x4a, 0xf1, 0x1b, 0xe4, 0xf5, 0x72, 0xc5, 0x18, 0xec, 0xa5, 0x1d, 0xab, 0xff,
	0x0f, 0xc8, 0x63, 0x0b, 0x1a, 0x79, 0xcf, 0x32, 0x0b, 0x35, 0xda, 0xa7, 0x59, 0xa8, 0xd9, 0x3b,
	0xe9, 0x0d, 0x25, 0x74, 0x9d, 0xac, 0x96, 0x0a, 0x1d, 0xfb, 0xb0, 0xd3, 0x57, 0xeb, 0x37, 0x0b,
	0xea, 0x23, 0x86, 0x46, 0x5e, 0x36, 0xd1, 0x9e, 0x34, 0x56, 0xfb, 0xea, 0x33, 0x71, 0xa8, 0xed,
	0x73, 0xa5, 0xed, 0x63, 0x72, 0xaf, 0x54, 0x9b, 0xb6, 0x58, 0xed, 0x7e, 0xa3, 0xa7, 0xed, 0xec,
	0xeb, 0x95, 0x76, 0xc4, 0x74, 0xc0, 0xf1, 0x0c, 0xef, 0x1e, 0x6c, 0xdc, 0x79, 0x72, 0xd8, 0xb4,
	0x9e, 0x1e, 0x36, 0xad, 0x7f, 0x0e, 0x9b, 0xd6, 0x8f, 0x47, 0xcd, 0xa9, 0xa7, 0x47, 0xcd, 0xa9,
	0xbf, 0x8e, 0x9a, 0x53, 0x9f, 0xb5, 0x7b, 0x3c, 0x4e, 0xb4, 0x05, 0x62, 0x50, 0x48, 0xfc, 0x95,
	0xa2, 0x4e, 0xde, 0x9b, 0xb2, 0x53, 0x51, 0xdf, 0x8f, 0xeb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x66, 0x0b, 0x94, 0x1c, 0xaa, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Policy items.
	Policy(ctx context.Context, in *QueryPolicyRequest, opts ...grpc.CallOption) (*QueryPolicyResponse, error)
	// Queries a list of PolicyIds items.
	PolicyIds(ctx context.Context, in *QueryPolicyIdsRequest, opts ...grpc.CallOption) (*QueryPolicyIdsResponse, error)
	// Queries a list of FilterRelationships items.
	FilterRelationships(ctx context.Context, in *QueryFilterRelationshipsRequest, opts ...grpc.CallOption) (*QueryFilterRelationshipsResponse, error)
	// Queries a list of VerifyAccessRequest items.
	VerifyAccessRequest(ctx context.Context, in *QueryVerifyAccessRequestRequest, opts ...grpc.CallOption) (*QueryVerifyAccessRequestResponse, error)
	// Queries a list of ValidatePolicy items.
	ValidatePolicy(ctx context.Context, in *QueryValidatePolicyRequest, opts ...grpc.CallOption) (*QueryValidatePolicyResponse, error)
	// Queries a list of AccessDecision items.
	AccessDecision(ctx context.Context, in *QueryAccessDecisionRequest, opts ...grpc.CallOption) (*QueryAccessDecisionResponse, error)
	// ObjectOwner returns the Actor ID of the the given Object's owner
	ObjectOwner(ctx context.Context, in *QueryObjectOwnerRequest, opts ...grpc.CallOption) (*QueryObjectOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Policy(ctx context.Context, in *QueryPolicyRequest, opts ...grpc.CallOption) (*QueryPolicyResponse, error) {
	out := new(QueryPolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/Policy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PolicyIds(ctx context.Context, in *QueryPolicyIdsRequest, opts ...grpc.CallOption) (*QueryPolicyIdsResponse, error) {
	out := new(QueryPolicyIdsResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/PolicyIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FilterRelationships(ctx context.Context, in *QueryFilterRelationshipsRequest, opts ...grpc.CallOption) (*QueryFilterRelationshipsResponse, error) {
	out := new(QueryFilterRelationshipsResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/FilterRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyAccessRequest(ctx context.Context, in *QueryVerifyAccessRequestRequest, opts ...grpc.CallOption) (*QueryVerifyAccessRequestResponse, error) {
	out := new(QueryVerifyAccessRequestResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/VerifyAccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatePolicy(ctx context.Context, in *QueryValidatePolicyRequest, opts ...grpc.CallOption) (*QueryValidatePolicyResponse, error) {
	out := new(QueryValidatePolicyResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/ValidatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccessDecision(ctx context.Context, in *QueryAccessDecisionRequest, opts ...grpc.CallOption) (*QueryAccessDecisionResponse, error) {
	out := new(QueryAccessDecisionResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/AccessDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObjectOwner(ctx context.Context, in *QueryObjectOwnerRequest, opts ...grpc.CallOption) (*QueryObjectOwnerResponse, error) {
	out := new(QueryObjectOwnerResponse)
	err := c.cc.Invoke(ctx, "/sourcehub.acp.Query/ObjectOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Policy items.
	Policy(context.Context, *QueryPolicyRequest) (*QueryPolicyResponse, error)
	// Queries a list of PolicyIds items.
	PolicyIds(context.Context, *QueryPolicyIdsRequest) (*QueryPolicyIdsResponse, error)
	// Queries a list of FilterRelationships items.
	FilterRelationships(context.Context, *QueryFilterRelationshipsRequest) (*QueryFilterRelationshipsResponse, error)
	// Queries a list of VerifyAccessRequest items.
	VerifyAccessRequest(context.Context, *QueryVerifyAccessRequestRequest) (*QueryVerifyAccessRequestResponse, error)
	// Queries a list of ValidatePolicy items.
	ValidatePolicy(context.Context, *QueryValidatePolicyRequest) (*QueryValidatePolicyResponse, error)
	// Queries a list of AccessDecision items.
	AccessDecision(context.Context, *QueryAccessDecisionRequest) (*QueryAccessDecisionResponse, error)
	// ObjectOwner returns the Actor ID of the the given Object's owner
	ObjectOwner(context.Context, *QueryObjectOwnerRequest) (*QueryObjectOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Policy(ctx context.Context, req *QueryPolicyRequest) (*QueryPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Policy not implemented")
}
func (*UnimplementedQueryServer) PolicyIds(ctx context.Context, req *QueryPolicyIdsRequest) (*QueryPolicyIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyIds not implemented")
}
func (*UnimplementedQueryServer) FilterRelationships(ctx context.Context, req *QueryFilterRelationshipsRequest) (*QueryFilterRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterRelationships not implemented")
}
func (*UnimplementedQueryServer) VerifyAccessRequest(ctx context.Context, req *QueryVerifyAccessRequestRequest) (*QueryVerifyAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessRequest not implemented")
}
func (*UnimplementedQueryServer) ValidatePolicy(ctx context.Context, req *QueryValidatePolicyRequest) (*QueryValidatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePolicy not implemented")
}
func (*UnimplementedQueryServer) AccessDecision(ctx context.Context, req *QueryAccessDecisionRequest) (*QueryAccessDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessDecision not implemented")
}
func (*UnimplementedQueryServer) ObjectOwner(ctx context.Context, req *QueryObjectOwnerRequest) (*QueryObjectOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Policy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Policy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/Policy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Policy(ctx, req.(*QueryPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PolicyIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPolicyIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PolicyIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/PolicyIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PolicyIds(ctx, req.(*QueryPolicyIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FilterRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFilterRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FilterRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/FilterRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FilterRelationships(ctx, req.(*QueryFilterRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/VerifyAccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyAccessRequest(ctx, req.(*QueryVerifyAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/ValidatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatePolicy(ctx, req.(*QueryValidatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccessDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccessDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccessDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/AccessDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccessDecision(ctx, req.(*QueryAccessDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObjectOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObjectOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObjectOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sourcehub.acp.Query/ObjectOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObjectOwner(ctx, req.(*QueryObjectOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sourcehub.acp.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Policy",
			Handler:    _Query_Policy_Handler,
		},
		{
			MethodName: "PolicyIds",
			Handler:    _Query_PolicyIds_Handler,
		},
		{
			MethodName: "FilterRelationships",
			Handler:    _Query_FilterRelationships_Handler,
		},
		{
			MethodName: "VerifyAccessRequest",
			Handler:    _Query_VerifyAccessRequest_Handler,
		},
		{
			MethodName: "ValidatePolicy",
			Handler:    _Query_ValidatePolicy_Handler,
		},
		{
			MethodName: "AccessDecision",
			Handler:    _Query_AccessDecision_Handler,
		},
		{
			MethodName: "ObjectOwner",
			Handler:    _Query_ObjectOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sourcehub/acp/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPolicyIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPolicyIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPolicyIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPolicyIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterRelationshipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterRelationshipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterRelationshipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterRelationshipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterRelationshipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterRelationshipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAccessRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAccessRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAccessRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessRequest != nil {
		{
			size, err := m.AccessRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAccessRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAccessRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAccessRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatePolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatePolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatePolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarshalType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarshalType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccessDecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccessDecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccessDecisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccessDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccessDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccessDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decision != nil {
		{
			size, err := m.Decision.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObjectOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObjectOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObjectOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObjectOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObjectOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObjectOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XOwnerId != nil {
		{
			size := m.XOwnerId.Size()
			i -= size
			if _, err := m.XOwnerId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryObjectOwnerResponse_OwnerId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObjectOwnerResponse_OwnerId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.OwnerId)
	copy(dAtA[i:], m.OwnerId)
	i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPolicyIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPolicyIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFilterRelationshipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFilterRelationshipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVerifyAccessRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AccessRequest != nil {
		l = m.AccessRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyAccessRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *QueryValidatePolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MarshalType != 0 {
		n += 1 + sovQuery(uint64(m.MarshalType))
	}
	return n
}

func (m *QueryValidatePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *QueryAccessDecisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccessDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decision != nil {
		l = m.Decision.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryObjectOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryObjectOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	if m.XOwnerId != nil {
		n += m.XOwnerId.Size()
	}
	return n
}

func (m *QueryObjectOwnerResponse_OwnerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerId)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPolicyIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPolicyIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPolicyIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterRelationshipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterRelationshipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterRelationshipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &RelationshipSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterRelationshipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterRelationshipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterRelationshipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RelationshipRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAccessRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAccessRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAccessRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessRequest == nil {
				m.AccessRequest = &AccessRequest{}
			}
			if err := m.AccessRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAccessRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAccessRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAccessRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatePolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatePolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatePolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshalType", wireType)
			}
			m.MarshalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarshalType |= PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccessDecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccessDecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccessDecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccessDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccessDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccessDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Decision == nil {
				m.Decision = &AccessDecision{}
			}
			if err := m.Decision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObjectOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObjectOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObjectOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObjectOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObjectOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObjectOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XOwnerId = &QueryObjectOwnerResponse_OwnerId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
