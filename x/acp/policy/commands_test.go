package policy

import (
	"context"
	"testing"

	"github.com/cometbft/cometbft/libs/log"
	tmproto "github.com/cometbft/cometbft/proto/tendermint/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/stretchr/testify/require"

	"github.com/sourcenetwork/sourcehub/testutil"
	authengineutil "github.com/sourcenetwork/sourcehub/testutil/auth_engine"
	"github.com/sourcenetwork/sourcehub/x/acp/auth_engine"
	acptestutil "github.com/sourcenetwork/sourcehub/x/acp/testutil"
	"github.com/sourcenetwork/sourcehub/x/acp/types"
)

var creatorStr = "cosmos1gue5de6a8fdff0jut08vw5sg9pk6rr00cstakj"
var creator = sdk.AccAddress([]byte(creatorStr))
var sequence uint64 = 1
var timestamp = testutil.MustDateTimeToProto("2023-07-26 14:08:30")
var marshalType = types.PolicyMarshalingType_SHORT_YAML

func setup(t *testing.T) (context.Context, auth_engine.AuthEngine, types.AccountKeeper) {
	engine, store := authengineutil.GetTestAuthEngine(t)
	ctx := sdk.NewContext(store, tmproto.Header{}, false, log.NewNopLogger())
	keeper := &acptestutil.AccountKeeperStub{}
	return ctx, engine, keeper
}

func TestCreatePolicy_ValidPolicyIsCreated(t *testing.T) {
	ctx, engine, keeper := setup(t)

	policyStr := `
name: policy
description: ok
resources:
  file:
    relations: 
      owner:
        doc: owner owns
        types:
          - actor-resource
      reader:
      admin:
        manages:
          - reader
    permissions: 
      own:
        expr: owner
        doc: own doc
      read: 
        expr: owner + reader
actor:
  name: actor-resource
  doc: my actor
          `
	policy, err := Unmarshal(policyStr, types.PolicyMarshalingType_SHORT_YAML)
	require.Nil(t, err)

	cmd := CreatePolicyCommand{
		CreatorAddr:  creator,
		Policy:       policy,
		CreationTime: timestamp,
	}
	got, err := cmd.Execute(ctx, keeper, engine)

	require.Nil(t, err)
	require.Equal(t, got, &types.Policy{
		Id:           "4f4bb16253a15448c1a3a2a67fdb4f4652f3ebf90c4326db53200b8d50c89ba6",
		Name:         "policy",
		Description:  "ok",
		CreationTime: timestamp,
		Creator:      creatorStr,
		Resources: []*types.Resource{
			&types.Resource{
				Name: "file",
				Relations: []*types.Relation{
					&types.Relation{
						Name: "admin",
						Manages: []string{
							"reader",
						},
						VrTypes: []*types.Restriction{},
					},
					&types.Relation{
						Name: "owner",
						Doc:  "owner owns",
						VrTypes: []*types.Restriction{
							&types.Restriction{
								ResourceName: "actor-resource",
								RelationName: "",
							},
						},
					},
					&types.Relation{
						Name: "reader",
					},
				},
				Permissions: []*types.Permission{
					&types.Permission{
						Name:       "own",
						Expression: "owner",
						Doc:        "own doc",
					},
					&types.Permission{
						Name:       "read",
						Expression: "owner + reader",
					},
					&types.Permission{
						Name:       "_can_manage_admin",
						Expression: "owner",
						Doc:        "permission controls actors which are allowed to create relationships for the admin relation (permission was auto-generated by SourceHub).",
					},
					&types.Permission{
						Name:       "_can_manage_owner",
						Expression: "owner",
						Doc:        "permission controls actors which are allowed to create relationships for the owner relation (permission was auto-generated by SourceHub).",
					},
					&types.Permission{
						Name:       "_can_manage_reader",
						Expression: "(admin + owner)",
						Doc:        "permission controls actors which are allowed to create relationships for the reader relation (permission was auto-generated by SourceHub).",
					},
				},
			},
		},
		ActorResource: &types.ActorResource{
			Name: "actor-resource",
			Doc:  "my actor",
		},
	})
}
