syntax = "proto3";

package sourcehub.acp;

import "google/protobuf/timestamp.proto";

import "sourcehub/acp/relationship.proto";

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

// SignedPolicyCmd represents a Command issued by an Actor in the context of a Policy
// The command represents an instruction to be executed
// The message type contains a signature which is used to authenticate the Command's Actor
message SignedPolicyCmd {
    // payload contains the command context
    PolicyCmdPayload payload = 1;

    // signature is a signature of the payload.
    // The signature is generated using the VerificationMethod / Authorization fields 
    // specificied by the DID document of the Actor.
    bytes signature = 2;
}

// PolicyCmdPayload represents the payload containing the context of the issued command
message PolicyCmdPayload {

    // actor is a did string representing the actor which issued the command
    string actor = 1;

    // issued_height is the SourceHub block height of when the Payload was created
    uint64 issued_height = 2;

    // expiration_delta specifies the maximum number of blocks from the issued height during which the Command Payload will be accepted.
    // This field is mandatory and is used to prevent replay attacks
    uint64 expiration_delta = 3;

    // creation_time contains a client generated timestamp for the creation of the command.
    // This is used only as metadata and isn't trusted
    google.protobuf.Timestamp creation_time = 4;

    // policy_id is the ID of the policy under which the Command will be executed
    string policy_id = 5;

    oneof cmd {
        SetRelationshipCmd set_relationship_cmd = 6;
        DeleteRelationshipCmd delete_relationship_cmd = 7;
        RegisterObjectCmd register_object_cmd = 8;
        UnregisterObjectCmd unregister_object_cmd = 9;
    }
}


// SetRelationshipCmd sets a Relationship in a Policy
message SetRelationshipCmd {
    Relationship relationship = 1;
}

// DeleteRelationshipCmd removes a Relationship in a Policy
message DeleteRelationshipCmd {
    Relationship relationship = 1;
}

// RegisterObjectCmd registers an Object in a Policy
message RegisterObjectCmd {
    Object object = 1;
}

// UnregisterObjectCmd unregisters an Object in a Policy
message UnregisterObjectCmd {
    Object object = 1;
}

// SetRelationshipCmd sets a Relationship in a Policy
message SetRelationshipCmdResult {
  // Indicates whether the given Relationship previously existed, ie the Tx was a no op
  bool record_existed = 1;
}

// DeleteRelationshipCmdResult removes a Relationship in a Policy
message DeleteRelationshipCmdResult {
  bool record_found = 1;
}

// RegisterObjectCmdResult registers an Object in a Policy
message RegisterObjectCmdResult {
    RegistrationResult result = 1;
    RelationshipRecord record = 2;
}

// UnregisterObjectCmdResult unregisters an Object in a Policy
message UnregisterObjectCmdResult {
  bool found = 1;
  uint64 relationships_removed = 2;
}

message PolicyCmdResult{
    oneof result {
        SetRelationshipCmdResult set_relationship_result = 1;
        DeleteRelationshipCmdResult delete_relationship_result = 2;
        RegisterObjectCmdResult register_object_result = 3;
        UnregisterObjectCmdResult unregister_object_result = 4;
    }
}