syntax = "proto3";

package sourcehub.acp;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sourcehub/acp/access_decision.proto";
import "sourcehub/acp/params.proto";
import "sourcehub/acp/policy.proto";
import "sourcehub/acp/policy_short.proto";
import "sourcehub/acp/relationship.proto";
import "sourcehub/acp/relationship_selector.proto";

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/params";
  
  }
  
  // Queries a list of Policy items.
  rpc Policy (QueryPolicyRequest) returns (QueryPolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy/{id}";
  
  }
  
  // Queries a list of PolicyIds items.
  rpc PolicyIds (QueryPolicyIdsRequest) returns (QueryPolicyIdsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy_ids";
  
  }
  
  // Queries a list of FilterRelationships items.
  rpc FilterRelationships (QueryFilterRelationshipsRequest) returns (QueryFilterRelationshipsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/filter_relationships/{policy_id}";
  
  }
  
  // Queries a list of VerifyAccessRequest items.
  rpc VerifyAccessRequest (QueryVerifyAccessRequestRequest) returns (QueryVerifyAccessRequestResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/verify_access_request/{policy_id}";
  
  }
  
  // Queries a list of ValidatePolicy items.
  rpc ValidatePolicy (QueryValidatePolicyRequest) returns (QueryValidatePolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/validate_policy/{policy}";
  
  }
  
  // Queries a list of AccessDecision items.
  rpc AccessDecision (QueryAccessDecisionRequest) returns (QueryAccessDecisionResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/access_decision/{id}";
  
  }
  
  // ObjectOwner returns the Actor ID of the the given Object's owner
  rpc ObjectOwner (QueryObjectOwnerRequest) returns (QueryObjectOwnerResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/object_owner/{policy_id}/{object.resource}/{object.id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryPolicyRequest {
  string id = 1;
}

message QueryPolicyResponse {
  Policy policy = 1;
}

message QueryPolicyIdsRequest {

  //cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPolicyIdsResponse {
  
  //cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated string ids = 1;
}

message QueryFilterRelationshipsRequest {
  string               policy_id = 1;
  RelationshipSelector selector  = 2;
}

message QueryFilterRelationshipsResponse {
  repeated RelationshipRecord records = 1;
}

message QueryVerifyAccessRequestRequest {
  string        policy_id      = 1;
  AccessRequest access_request = 2;
}

message QueryVerifyAccessRequestResponse {
  bool valid = 1;
}

message QueryValidatePolicyRequest {
  string               policy       = 1;
  PolicyMarshalingType marshal_type = 3;
}

message QueryValidatePolicyResponse {
  bool valid = 1;
}

message QueryAccessDecisionRequest {
  string id = 1;
}

message QueryAccessDecisionResponse {
  AccessDecision decision = 1;
}

message QueryObjectOwnerRequest {
  string policy_id = 1;
  Object object   = 2;
}

message QueryObjectOwnerResponse {
  bool is_registered = 1;
  optional string owner_id = 2;
}