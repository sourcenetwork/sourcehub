syntax = "proto3";

package sourcenetwork.sourcehub.acp;

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

import "sourcenetwork/sourcehub/acp/relationship.proto";
import "sourcenetwork/sourcehub/acp/policy_marshaled.proto";
import "sourcenetwork/sourcehub/acp/policy.proto";
import "google/protobuf/timestamp.proto";

// Msg defines the Msg service.
service Msg {
    rpc CreatePolicy       (MsgCreatePolicy      ) returns (MsgCreatePolicyResponse      );
    rpc SetRelationship (MsgSetRelationship) returns (MsgSetRelationshipResponse);
    rpc DeleteRelationship (MsgDeleteRelationship) returns (MsgDeleteRelationshipResponse);
    rpc RegisterObject     (MsgRegisterObject    ) returns (MsgRegisterObjectResponse    );
    rpc UnregisterObject   (MsgUnregisterObject  ) returns (MsgUnregisterObjectResponse  );
}

message MsgCreatePolicy {
    string creator = 1;
    string policy = 2;
    PolicyMarshalingType marshal_type = 3;
    google.protobuf.Timestamp creation_time = 4;
}

message MsgCreatePolicyResponse {
    Policy policy = 1;
}

message MsgSetRelationship {
    string creator = 1;
    string policy_id = 2;
    google.protobuf.Timestamp creation_time = 3;
    Relationship relationship = 4;
}

message MsgSetRelationshipResponse {
    // Indicates whether the given Relationship previously existed, ie the Tx was a no op
    bool record_existed = 1;
}

message MsgDeleteRelationship {
    string creator = 1;
    string policy_id = 2;
    Object object = 3;
    string relation = 4;
    Subject subject = 5;
}

message MsgDeleteRelationshipResponse {
    bool record_found = 1;
}

message MsgRegisterObject {
    string creator = 1;
    string policy_id = 2;
    Registration registration = 3;
    google.protobuf.Timestamp creation_time = 5;
}

message MsgRegisterObjectResponse {
    RegistrationResult result = 1;
}

message MsgUnregisterObject {
    string creator = 1;
    string policy_id = 2;
    Object object = 3;
}

message MsgUnregisterObjectResponse {
    bool found = 1;
}
